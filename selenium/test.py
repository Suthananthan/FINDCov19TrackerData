# Generated by Selenium IDE
import pytest
import time
import json
import requests
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from selenium.webdriver.chrome.options import Options
from selenium.common.exceptions import NoSuchElementException
from datetime import date
import unittest

class TestDefaultSuite(unittest.TestCase):
  def setUp(self):
    chrome_options = Options()
    chrome_options.add_argument("--headless")
    # Required for test_france() to work
    # https://stackoverflow.com/questions/51220794/selenium-not-working-in-headless-mode
    # https://sqa.stackexchange.com/questions/33778/chromedriver-in-headless-mode-doesnt-work-correctly-because-of-windows-user-pol
    chrome_options.add_argument("--window-size=3020,1580") # With this size African countries work
    # Required for test_pakistan() to work
    # https://stackoverflow.com/questions/29916054/change-user-agent-for-selenium-web-driver
    chrome_options.add_argument("user-agent=foo")
    self.driver = webdriver.Chrome(options=chrome_options)
    # set load timeout: https://stackoverflow.com/questions/36026676/python-selenium-timeout-exception-catch
    self.driver.set_page_load_timeout(30)
    #self.driver = webdriver.Chrome()
    self.vars = {}
    # FIXME: The data needs to be included
    # self.vars["date"] = date.today().strftime("%Y-%m-%d")

  def tearDown(self):
    self.driver.quit()

  def test_andorra(self):
    self.driver.get("https://www.govern.ad/covid19/en/")
    WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, "#capacidtat .grid > .shadow:nth-child(1) .text-primary")))
    pcr_tests = self.driver.find_element(By.CSS_SELECTOR, "#capacidtat .grid > .shadow:nth-child(1) .text-primary").text
    WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, "#capacidtat .shadow:nth-child(2) .text-primary")))
    tma_tests = self.driver.find_element(By.CSS_SELECTOR, "#capacidtat .shadow:nth-child(2) .text-primary").text
    WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".mt-8:nth-child(3) > .grid > .shadow:nth-child(3) .text-primary")))
    antibody_tests = self.driver.find_element(By.CSS_SELECTOR, ".mt-8:nth-child(3) > .grid > .shadow:nth-child(3) .text-primary").text
    self.vars["tests_cumulative"] = int(pcr_tests.replace(',','').split("\n")[0]) + int(tma_tests.replace(',','').split("\n")[0]) + int(antibody_tests.replace(',','').split("\n")[0])
    self.driver.close()

  def test_antiguaandBarbuda(self):
    self.driver.get("https://covid19.gov.ag")
    self.vars["tests_cumulative"] = self.driver.find_element(By.CSS_SELECTOR, ".icon-test-done > .case-Number").text
    self.driver.close()
    print(self.vars)
  
  def test_albania(self):
    self.driver.get("https://coronavirus.al/statistika/")
    time.sleep(15)
    self.vars["tests_cumulative"] = self.driver.find_element(By.ID, "teste_gjithesej").text
    self.vars["tests_cumulative"] = self.vars["tests_cumulative"].split("\n")[0]
    print(self.vars)
    self.driver.close()
    
  def test_argentina(self):
    self.driver.get("https://coronavirus.msal.gov.ar/publico/d/20as/sala-de-situacion-coronavirus-acceso-publico/d/20as/sala-de-situacion-coronavirus-acceso-publico?orgId=3&refresh=15m")
    time.sleep(60)
    WebDriverWait(self.driver, 20).until(expected_conditions.visibility_of_element_located((By.XPATH, "//*[@id=\"panel-103\"]/div/div/div[1]/div/div[2]/div/plugin-component/panel-plugin-singlestat/grafana-panel/ng-transclude/div/div/span/span")))
    self.vars["tests_cumulative"] = self.driver.find_element(By.XPATH, "//*[@id=\"panel-103\"]/div/div/div[1]/div/div[2]/div/plugin-component/panel-plugin-singlestat/grafana-panel/ng-transclude/div/div/span/span").text
    print(self.vars)
    self.driver.close()
    
  def test_armenia(self):
    self.driver.get("https://infogram.com/--1h7j4drmogk92nr")
    WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".\\__ig-alignLeft:nth-child(4) span > span")))
    self.vars["tests_cumulative"] = self.driver.find_element(By.CSS_SELECTOR, ".\\__ig-alignLeft:nth-child(4) span > span").text
    self.driver.close()

  def test_australia(self):
    self.driver.get("https://www.health.gov.au/news/health-alerts/novel-coronavirus-2019-ncov-health-alert/coronavirus-covid-19-current-situation-and-case-numbers#tests-conducted-and-results")
    time.sleep(60)
    WebDriverWait(self.driver, 90).until(expected_conditions.visibility_of_element_located((By.XPATH, "//div[@id=\'widgetzfDpnUy\']/div/table/tbody/tr/td[4]")))
    self.vars["tests_cumulative"] = self.driver.find_element(By.XPATH, "//div[@id=\'widgetzfDpnUy\']/div/table/tbody/tr/td[4]").text
    self.driver.close()
    
  def test_austria(self):
    self.driver.get("https://www.sozialministerium.at/Informationen-zum-Coronavirus/Neuartiges-Coronavirus-(2019-nCov).html")
    self.vars["tests_cumulative"] = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(6) > td:nth-child(11)").text
    self.vars["pcr_tests_cum"] = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(7) > td:nth-child(11)").text
    self.vars["rapid_test_cum"] = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(8) > td:nth-child(11)").text
    self.driver.close()

  def test_azerbaijan(self):
    self.driver.get("https://koronavirusinfo.az/az/page/statistika/azerbaycanda-cari-veziyyet")
    self.vars["tests_cumulative"] = self.driver.find_element(By.CSS_SELECTOR, ".gray_little_statistic:nth-child(6) > strong").text
    self.driver.close()

  def test_bahrain(self):
    self.driver.maximize_window()
    self.driver.set_page_load_timeout(30)
    self.driver.get("https://healthalert.gov.bh/en/")
    time.sleep(60)
    self.vars["tests_cumulative"] = self.driver.find_element(By.XPATH, "//div[1]/div/div[1]/div/ul/li/div[2]/div/span").text
    self.driver.close()
    
  def test_bangladesh(self):
    self.driver.get("https://corona.gov.bd/")
    self.driver.find_element(By.CSS_SELECTOR, ".close > span").click()
    self.driver.find_element(By.CSS_SELECTOR, ".lang-btn").click()
    self.driver.find_element(By.CSS_SELECTOR, ".close > span").click()
    self.vars["tests_cumulative"] = self.driver.find_element(By.CSS_SELECTOR, ".live-update-box-body-three .text-right b").text
    self.driver.close()
    
  def test_barbados(self):
    self.driver.get("https://gisbarbados.gov.bb/covid-19/")
    time.sleep(10)
    self.driver.find_element(By.XPATH, "//a[contains(text(),\'COVID-19 Update\')]").click()
    time.sleep(10)
    try:
        self.vars["tests_cumulative"] = self.driver.find_element(By.XPATH, "//p[contains(.,\'The public health laboratory has completed\')]").text
        self.vars["tests_cumulative"] = self.vars["tests_cumulative"].split("has completed")[1].split("tests")[0]
    except NoSuchElementException:
            try:
                self.vars["tests_cumulative"] = self.driver.find_element(By.XPATH, "//p[contains(.,\'completed\')]").text
                self.vars["tests_cumulative"] = self.vars["tests_cumulative"].split("completed")[1]
            except NoSuchElementException:
                self.vars["tests_cumulative"] = self.driver.find_element(By.XPATH, "//p[contains(.,\'The lab has performed\')]").text
                self.vars["tests_cumulative"] = self.vars["tests_cumulative"].split("has performed")[1].split("tests")[0]
    self.driver.close()
    
  def test_belarus(self):
    self.driver.get("http://stopcovid.belta.by/")
    WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, "#rec266847794 .t-animate__chain_first-in-row > .t192__title")))
    self.vars["tests_cumulative"] = self.driver.find_element(By.CSS_SELECTOR, "#rec266847794 .t-animate__chain_first-in-row > .t192__title").text
    self.driver.close()
    
  def test_belgium(self):
    self.driver.get("https://datastudio.google.com/embed/u/0/reporting/c14a5cfc-cab7-4812-848c-0369173148ab/page/cUWaB")
    WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".cd-345jc65scc .valueLabel")))
    self.vars["tests_cumulative"] = self.driver.find_element(By.CSS_SELECTOR, ".cd-345jc65scc .valueLabel").text
    self.driver.close()
    
  def test_belize(self):
    self.driver.maximize_window()
    self.driver.set_page_load_timeout(30)
    self.driver.get("https://sib.org.bz/covid-19/by-the-numbers/")
    WebDriverWait(self.driver, 60).until(expected_conditions.visibility_of_element_located((By.ID, "content")))
    self.vars["tests_cumulative"] = self.driver.find_element(By.ID, "content").text
    self.vars["tests_cumulative"] = self.vars["tests_cumulative"].split('outbreak situation\n')[1].split('\nTests Completed')[0]
    self.driver.close()    

  def test_benin(self):
    self.driver.get("https://www.gouv.bj/coronavirus/")
    self.vars["pcr_tests_cum"] = self.driver.find_element(By.CSS_SELECTOR, ".left-5:nth-child(1) .h1").text
    self.vars["rapid_test_cum"] = self.driver.find_element(By.CSS_SELECTOR, ".left-5:nth-child(2) .h1").text
    self.vars["tests_cumulative"] = int(self.vars["pcr_tests_cum"])+int(self.vars["rapid_test_cum"])
    print(self.vars)
    self.driver.close()

  def test_bermuda(self):
    self.driver.get("https://www.gov.bm/coronavirus-covid19-update")
    WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, "tr:nth-child(2) > td:nth-child(2)")))
    self.vars["tests_cumulative"] = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(2) > td:nth-child(2)").text
    self.driver.close()

  def test_bulgaria(self):
    self.driver.maximize_window()
    self.driver.set_page_load_timeout(60)
    self.driver.get("https://coronavirus.bg/")
    time.sleep(30)
    self.driver.execute_script("window.scrollTo(0,450)")
    time.sleep(30)
    WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".col-lg-4:nth-child(1) > .statistics-value")))
    self.vars["tests_cumulative"] = self.driver.find_element(By.CSS_SELECTOR, ".col-lg-4:nth-child(1) > .statistics-value").text
    self.driver.close()

  def test_bosniaandHerzegovina(self):
    self.driver.get("https://covid-19.ba/")
    WebDriverWait(self.driver, 90).until(expected_conditions.visibility_of_element_located((By.ID, "total_tested_positive")))
    self.vars["tests_cumulative"] = self.driver.find_element(By.ID, "total_tested_positive").text
    self.driver.close()

  def test_brazil(self):
    self.driver.maximize_window()
    self.driver.set_page_load_timeout(30)
    self.driver.get("https://viz.saude.gov.br/extensions/DEMAS_C19Insumos_TESTES/DEMAS_C19Insumos_TESTES.html")
    WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.XPATH, "//*[@id=\"KPI-01\"]")))
    time.sleep(30)
    self.driver.find_element(By.XPATH, "//*[@id=\"KPI-01\"]")
    time.sleep(30)
    self.vars["tests_cumulative"] = self.driver.find_element(By.XPATH, "//*[@id=\"KPI-01\"]").text.split('\n')[1]
    time.sleep(30)
    self.driver.find_element(By.XPATH, "//*[@id=\"KPI-02\"]")
    time.sleep(30)
    self.vars["pcr_tests_cum"] = self.driver.find_element(By.XPATH, "//*[@id=\"KPI-02\"]").text.split('\n')[1]
    time.sleep(30)
    self.driver.find_element(By.XPATH, "//*[@id=\"KPI-03\"]")
    time.sleep(30)
    self.vars["rapid_test_cum"] = self.driver.find_element(By.XPATH, "//*[@id=\"KPI-03\"]").text.split('\n')[1]
    print(self.vars)
    
  def test_brunei(self):
    self.driver.maximize_window()
    self.driver.set_page_load_timeout(60)
    self.driver.get("http://www.moh.gov.bn/Lists/Latest%20news/AllItems.aspx")
    WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.XPATH, "//tbody")))
    url = self.driver.find_element(By.XPATH, "//a[contains(text(),\'new case COVID-19\')]").get_attribute('href')
    self.driver.get(url)
    WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, "#WebPartWPQ13 > table > tbody > tr:nth-child(3) > td > table > tbody > tr:nth-child(2) > td > div > table:nth-child(18) > tbody > tr:nth-child(2) > td:nth-child(2) > strong")))
    self.vars["tests_cumulative"] = self.driver.find_element(By.CSS_SELECTOR, "#WebPartWPQ13 > table > tbody > tr:nth-child(3) > td > table > tbody > tr:nth-child(2) > td > div > table:nth-child(18) > tbody > tr:nth-child(2) > td:nth-child(2) > strong").text
    self.driver.close()

  def test_cambodia(self):
    self.driver.get("http://cdcmoh.gov.kh")
    self.driver.set_window_size(1542, 830)
    self.driver.find_element(By.CSS_SELECTOR, "#content > div.blog > div > div > div.item.column-1 > div:nth-child(9) > strong").click()
    self.vars["tests_cumulative"] = self.driver.find_element(By.CSS_SELECTOR, "#content > div.blog > div > div > div.item.column-1 > div:nth-child(9) > strong").text
    self.vars["tests_cumulative"] = self.vars["tests_cumulative"].split(' ')[1]
    self.driver.close()

  def test_canada(self):
    self.driver.get("https://health-infobase.canada.ca/covid-19/epidemiological-summary-covid-19-cases.html")
    time.sleep(15)
    self.vars["tests_cumulative"] = self.driver.find_element(By.CSS_SELECTOR, "#keybox8 > div > p.h2 > span").text
    print(self.vars)
    self.driver.close()

  def test_czechia(self):
    self.driver.get("https://onemocneni-aktualne.mzcr.cz/covid-19")
    WebDriverWait(self.driver, 40).until(expected_conditions.visibility_of_element_located((By.ID, "count-test")))
    self.vars["pcr_tests_cum"] = self.driver.find_element(By.ID, "count-test").text.replace(" ","")
    self.vars["rapid_test_cum"] = self.driver.find_element(By.XPATH, "//div[2]/div/p[2]").text.split("\n")[0].replace(" ","")
    self.vars["tests_cumulative"] = int(self.vars["pcr_tests_cum"]) + int(self.vars["rapid_test_cum"])
    print(self.vars)
    self.driver.close()

  def test_chile(self):
    self.driver.get("https://www.gob.cl/coronavirus/cifrasoficiales/")
    time.sleep(60)
    self.driver.switch_to.frame(0)
    self.vars["tests_cumulative"] = self.driver.find_element(By.XPATH, '//*[@id="106fdff4-b841-4389-a4bf-7541e6143abd"]/div[1]/div/div[64]/div/div/div/div/div/div/div/div/div/div/div/h2/div/span/span').text 
    self.driver.close()

  def test_croatia(self):
    self.driver.get("https://www.koronavirus.hr/najnovije/ukupno-dosad-382-zarazene-osobe-u-hrvatskoj/35")
    WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.ID, "page_content")))
    self.vars["tests_cumulative"] = self.driver.find_element(By.ID, "page_content").text
    try :
      self.vars["tests_cumulative"] = self.vars["tests_cumulative"].split('Do danas je ukupno testirana ')[1].split('osoba')[0]
    except IndexError :
      self.vars["tests_cumulative"] = self.vars["tests_cumulative"].split('Do danas je ukupno testirano ')[1].split('osoba')[0]
      try :
        self.vars["tests_cumulative"] = self.vars["tests_cumulative"].split('Do danas je ukupno testirana ')[1].split('osoba')[0]
      except IndexError:
        self.vars["tests_cumulative"] = self.vars["tests_cumulative"].split('Do danas su ukupno testirane ')[1].split('osobe')[0]
    self.driver.close()
    
  # only new tests daily
  #def test_cyprus(self):
    #self.driver.get("https://covid19.ucy.ac.cy/")
    #time.sleep(90)
    #self.driver.switch_to.frame(0)
    #self.vars["tests_daily"] = self.driver.find_element(By.CSS_SELECTOR, "#pvExplorationHost > div > div > exploration > div > explore-canvas-modern > div > div.canvasFlexBox > div > div.displayArea.disableAnimations.fitToWidthOrigin > div.visualContainerHost > visual-container-repeat > visual-container-modern:nth-child(31) > transform > div > div:nth-child(22) > div > visual-modern > div > svg > g:nth-child(1) > text > tspan").text
    #self.driver.close()

  def test_denmark(self):
    self.driver.get("https://www.sst.dk/en/english/corona-eng/status-of-the-epidemic/covid-19-updates-statistics-and-charts")
    time.sleep(30)
    #try:
        #self.vars["tests_cumulative"] = self.driver.find_element(By.CSS_SELECTOR, ".table-responsive:nth-child(8) tr:nth-child(2) > td:nth-child(2) > span").text
    #except NoSuchElementException:
        #self.vars["tests_cumulative"] = self.driver.find_element(By.CSS_SELECTOR, ".table-responsive:nth-child(7) tr:nth-child(2) > td:nth-child(2) > span").text
    self.vars["tests_cumulative"] = self.driver.find_element(By.CSS_SELECTOR, "#main__content > main > article > div.o-content-block.u-grid.u-grid--space-between.u-grid--no-gutter.u-ie > div > div:nth-child(1) > div:nth-child(11) > table > tbody > tr:nth-child(2) > td:nth-child(2) > p:nth-child(1) > span").text
    print(self.vars)
    self.driver.close()

  def test_ecuador(self):
    self.driver.maximize_window()
    self.driver.set_page_load_timeout(30)
    self.driver.get("https://www.salud.gob.ec/actualizacion-de-casos-de-coronavirus-en-ecuador/")
    time.sleep(90)
    WebDriverWait(self.driver, 90).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, "#postcontent > table > tbody > tr:nth-child(1) > td:nth-child(2) > p:nth-child(1) > strong:nth-child(1)")))
    self.vars["tests_cumulative"] = self.driver.find_element(By.CSS_SELECTOR, "#postcontent > table > tbody > tr:nth-child(1) > td:nth-child(2) > p:nth-child(1) > strong:nth-child(1)").text
    self.driver.close()

  def test_elSalvador(self):
    self.driver.maximize_window()
    self.driver.set_page_load_timeout(30)
    self.driver.get("https://covid19.gob.sv/")
    time.sleep(30)
    WebDriverWait(self.driver, 30).until(expected_conditions.frame_to_be_available_and_switch_to_it(0))
    self.driver.execute_script("window.scrollTo(0,300)")
    WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.XPATH, "//div[1]//div//div[28]")))
    self.vars["tests_cumulative"] = self.driver.find_element(By.XPATH, "//div[1]//div//div[28]").text
    self.driver.close()
    
  def test_estonia(self):
    self.driver.maximize_window()
    self.driver.set_page_load_timeout(30)
    self.driver.get("https://koroonakaart.ee/et")
    WebDriverWait(self.driver, 90).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".row:nth-child(4) > .statsbar-item:nth-child(4) > h1")))
    self.vars["tests_cumulative"] = self.driver.find_element(By.CSS_SELECTOR, "#statsbar-container > div:nth-child(2) > div:nth-child(4) > h1").text
    self.driver.close()

  def test_faroeIslands(self):
    self.driver.get("https://corona.fo/?_l=en")
    WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.XPATH, "//*[@id=\"ease_flexibleitem_9\"]/grid[2]/column/grid[1]/column[5]/div[1]")))
    self.vars["tests_cumulative"] = self.driver.find_element(By.XPATH, "//*[@id=\"ease_flexibleitem_9\"]/grid[2]/column/grid[1]/column[5]/div[1]").text
    self.driver.close()

  def test_fiji(self):  
    self.driver.get("http://www.health.gov.fj/")
    url=self.driver.find_element(By.XPATH, "(//a[contains(text(),\'COVID-19 Update\')])[3]").get_attribute('href')
    self.driver.get(url)
    self.vars["tests_cumulative"] = self.driver.find_element(By.XPATH, "//p[contains(.,\'laboratory tests have been conducted\')]").text
    self.vars["tests_cumulative"] = self.vars["tests_cumulative"].split('total of')[1].split('lab')[0]
    self.driver.close()

  def test_finland(self):
    self.driver.get("https://thl.fi/fi/web/infektiotaudit-ja-rokotukset/ajankohtaista/ajankohtaista-koronaviruksesta-covid-19/tilannekatsaus-koronaviruksesta")
    time.sleep(10)
    self.vars["tests_cumulative"] = self.driver.find_element(By.CSS_SELECTOR, "#portlet_com_liferay_journal_content_web_portlet_JournalContentPortlet_INSTANCE_btcH1nKJDcrm > div > div.portlet-content-container > div > div.clearfix.journal-content-article > ul:nth-child(7) > li:nth-child(2) > strong").text
    self.driver.close()

  def test_france(self):
    self.driver.maximize_window()
    self.driver.set_page_load_timeout(30)
    self.driver.get("https://dashboard.covid19.data.gouv.fr/suivi-des-tests?location=FRA")
    WebDriverWait(self.driver, 90).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".counter-container > .jsx-792689997")))
    self.vars["tests_cumulative"] = self.driver.find_element(By.CSS_SELECTOR, ".counter-container > .jsx-792689997").text
    self.driver.close()

  # only daily tests  
  #def test_georgia(self):
    #self.driver.get("https://stopcov.ge/en/")
    #WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".statistic-square:nth-child(4)")))
    #self.vars["tests_daily"] = self.driver.find_element(By.CSS_SELECTOR, ".statistic-square:nth-child(4) > .quantity-numver:nth-child(1)").text
    #self.driver.close()

  def test_greece(self):
    self.driver.get("https://covid19.innews.gr/iframe")
    time.sleep(10)
    self.vars["tests_cumulative"] = self.driver.find_element(By.CSS_SELECTOR, ".tests-badge .total").text

  def test_greenland(self):
    self.driver.get("https://nun.gl/emner/borgere/coronavirus_emne/foelg_smittespredningen?sc_lang=da")
    self.vars["tests_cumulative"] = self.driver.find_element(By.XPATH, "//table[@id=\'covid_19\']/tbody/tr/td[2]").text
    self.driver.close()

  def test_guatemala(self):
    self.driver.get("https://gtmvigilanciacovid.shinyapps.io/3869aac0fb95d6baf2c80f19f2da5f98")
    WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".sidebar-menu")))
    self.driver.find_element(By.CSS_SELECTOR, "li:nth-child(2) span").click()
    WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, "#casosSospechososValueBox > div > div.inner > h3")))
    self.vars["tests_cumulative"] = self.driver.find_element(By.CSS_SELECTOR, "#casosSospechososValueBox > div > div.inner > h3").text
    self.driver.close()

  def test_hungary(self):
    self.driver.get("https://koronavirus.gov.hu/#aktualis")
    time.sleep(10)
    WebDriverWait(self.driver, 90).until(expected_conditions.visibility_of_element_located((By.ID, "content-mintavetel")))
    time.sleep(10)
    self.vars["tests_cumulative"] = self.driver.find_element(By.ID, "content-mintavetel").text
    self.driver.close()

  def test_iceland(self):
    self.driver.get("https://www.covid.is/tolulegar-upplysingar")
    self.driver.switch_to.frame(0)
    WebDriverWait(self.driver, 90).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".InfographicEditor-Contents-Item:nth-child(16) span")))
    self.driver.find_element(By.CSS_SELECTOR, ".InfographicEditor-Contents-Item:nth-child(16) span").click()
    self.vars["tests_cumulative"] = self.driver.find_element(By.CSS_SELECTOR, ".InfographicEditor-Contents-Item:nth-child(16) span").text
    self.driver.close()

  def test_india(self):
    self.driver.get("https://www.icmr.gov.in/")
    WebDriverWait(self.driver, 90).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".col-12:nth-child(1) > .single-cool-fact h2")))
    self.vars["tests_cumulative"] = self.driver.find_element(By.CSS_SELECTOR, ".col-12:nth-child(1) > .single-cool-fact h2").text
    self.driver.close()

  def test_indonesia(self):
    self.driver.set_page_load_timeout(60)
    self.driver.get("https://covid19.disiplin.id")
    WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".global-area:nth-child(3) > .text-danger:nth-child(1)")))
    self.vars["tests_cumulative"] = self.driver.find_element(By.CSS_SELECTOR, ".global-area:nth-child(3) > .text-danger:nth-child(1)").text
    self.driver.close()

  def test_iran(self):
    self.driver.get("http://irangov.ir/search?key=Health%20Ministry&title=1")
    self.driver.find_element_by_id("blockid_2")
    url = self.driver.find_element(By.XPATH, "//div[3]//div[2]//div[1]//a").get_attribute('href')
    self.driver.get(url)
    WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.XPATH, "//h1")))
    self.vars["tests_cumulative"] = self.driver.find_element(By.XPATH, "//p[contains(.,\'The spokeswoman noted that\')]").text
    self.vars["tests_cumulative"] = self.vars["tests_cumulative"].split('The spokeswoman noted that ')[1].split('COVID')[0]
    self.driver.close()
    
  # only daily tests 
  #def test_israel(self):
    #self.driver.get("https://datadashboard.health.gov.il/COVID-19/general")
    #self.driver.find_element(By.CSS_SELECTOR, ".buttonText").click()
    #WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".col-6:nth-child(6) .amount")))
    #self.vars["tests_daily"] = self.driver.find_element(By.CSS_SELECTOR, ".col-6:nth-child(6) .amount").text
    #self.driver.close()

  def test_italy(self):
    self.driver.get("https://raw.githubusercontent.com/pcm-dpc/COVID-19/master/dati-json/dpc-covid19-ita-andamento-nazionale-latest.json")
    self.vars["tests_cumulative"] = self.driver.find_element(By.CSS_SELECTOR, "body").text.strip().split('"tamponi":')[1].split('\n')[0]
    self.driver.close()

  def test_ireland(self):
    self.driver.get("https://covid19ireland-geohive.hub.arcgis.com/pages/hospitals-icu--testing")
    WebDriverWait(self.driver, 90).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, "#ember142 .ss-value")))
    self.vars["tests_cumulative"] = self.driver.find_element(By.CSS_SELECTOR, "#ember142 .ss-value").text
    self.driver.close()

  # def test_jamaica(self):
  #   self.driver.get("https://www.moh.gov.jm/updates/coronavirus/covid-19-clinical-management-summary/")
  #   self.driver.find_element(By.XPATH, "//a[contains(text(),\'COVID-19 Clinical Management Summary\')]").click()
  #   self.vars["tests_cumulative"] = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(25) > td:nth-child(3)").text
  #   self.driver.close()

  # def test_japan(self):
  #   self.driver.get("https://www.mhlw.go.jp/stf/covid-19/kokunainohasseijoukyou.html")
  #   WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.XPATH, "//div[@id=\'current_situation\']/table/tbody//th[contains(text(), \'国内事例\')]/following-sibling::td[1]")))
  #   self.vars["tests_cumulative"] = self.driver.find_element(By.XPATH, "//div[@id=\'current_situation\']/table/tbody//th[contains(text(), \'国内事例\')]/following-sibling::td[1]").text
  #   self.vars["tests_cumulative"] = self.vars["tests_cumulative"].split('\n')[0]
  #   self.driver.close()

  def test_jordan(self):
    self.driver.maximize_window()
    self.driver.set_page_load_timeout(30)
    self.driver.get("https://app.powerbi.com/view?r=eyJrIjoiOTUxMTEwMzItYzM5ZS00MTZjLTkxNmYtYjBjYjUyZGIwNThlIiwidCI6IjM3MjI3YTljLWI1OGUtNGNiNi05NDNhLWI2ZjE5ZmJjZWFjMCIsImMiOjl9&pageName=ReportSection8911066d0a4953dfcbe5")
    time.sleep(30)
    self.vars["tests_cumulative"] = self.driver.find_element(By.XPATH, '//*[@id="pvExplorationHost"]/div/div/exploration/div/explore-canvas-modern/div/div[2]/div/div[2]/div[2]/visual-container-repeat/visual-container-modern[21]/transform/div/div[3]/div/visual-modern/div/svg/g[1]/text').text
    print(self.vars)
    self.driver.close()

  def test_laoPeoplesDemocraticRepublic(self):
    self.driver.maximize_window()
    self.driver.set_page_load_timeout(30)
    self.driver.get("https://www.covid19.gov.la/index.php")
    WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".col-md-6:nth-child(6) p:nth-child(2)")))
    self.vars["tests_cumulative"] = self.driver.find_element(By.CSS_SELECTOR, ".col-md-6:nth-child(6) p:nth-child(2)").text
    self.vars["tests_cumulative"] = self.vars["tests_cumulative"].split(" ")[0]
    self.driver.close()

  def test_latvia(self):
    self.driver.get("https://spkc.maps.arcgis.com/apps/opsdashboard/index.html#/4469c1fb01ed43cea6f20743ee7d5939")
    time.sleep(10)
    self.vars["tests_cumulative"] = self.driver.find_element(By.CSS_SELECTOR, "#ember17 strong").text
    print(self.vars)
    self.driver.close()

  def test_lebanon(self):
    self.driver.get("https://corona.ministryinfo.gov.lb/")
    WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".s-counter3")))
    time.sleep(60)
    self.vars["tests_cumulative"] = self.driver.find_element(By.CSS_SELECTOR, ".s-counter3").text
    self.driver.close()

  def test_lithuania(self):
    self.driver.get("https://koronastop.lrv.lt/en/")
    self.driver.find_element(By.CSS_SELECTOR, ".stats_footnote > p:nth-child(1)").click()
    self.vars["tests_cumulative"] = self.driver.find_element(By.CSS_SELECTOR, "strong:nth-child(2)").text
    print(self.vars)
    self.driver.close()

  def test_malta(self):
    self.driver.get("https://geosys-mt.maps.arcgis.com/apps/opsdashboard/index.html#/8f64954974744d6fb137a26e097d97d2")
    time.sleep(30)
    self.vars["tests_cumulative"] = self.driver.find_element(By.CSS_SELECTOR, "#ember307 > svg > g.responsive-text-label > svg > text").text 
    self.driver.close()

  def test_mexico(self):
    self.driver.set_page_load_timeout(60)
    self.driver.get("https://datos.covid-19.conacyt.mx/")
    time.sleep(30)
    positivos = self.driver.find_element(By.XPATH, "//*[@id=\"gsPosDIV\"]").text.replace(',','')
    negativos = self.driver.find_element(By.XPATH, "//*[@id=\"gsNegDIV\"]").text.replace(',','')
    sospechosos = self.driver.find_element(By.XPATH, "//*[@id=\"gsSosDIV\"]").text.replace(',','')
    self.vars["tests_cumulative"] = int(positivos)+int(negativos)+int(sospechosos)
    self.driver.close()
    
  # only new tests daily
  #def test_luxembourg(self):
    #self.driver.get("https://covid19.public.lu/en.html")
    #WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".cmp-gridStat__item:nth-child(1)")))
    #self.vars["tests_daily"] = self.driver.find_element(By.CSS_SELECTOR, ".cmp-gridStat__item:nth-child(1) .number").text
    #self.driver.close()

  # only new tests daily
  #def test_moldova(self):
    #self.driver.get("https://msmps.gov.md/?s=cazuri+de+COVID-19")
    #WebDriverWait(self.driver, 30000).until(expected_conditions.element_to_be_clickable((By.XPATH, "//*[contains(text(), \"Mai multe\")]/parent::p/a")))
    #url = self.driver.find_element(By.XPATH, "//*[contains(text(), \"Mai multe\")]/parent::p/a").get_attribute('href')
    #self.driver.get(url)
    #WebDriverWait(self.driver, 30000).until(expected_conditions.visibility_of_element_located((By.XPATH, "//h2")))
    #self.vars["tests_daily"] = self.driver.find_element(By.XPATH, "//main").text
    #self.vars["tests_daily"] = self.vars["tests"].split('Numărul total teste efectuate')[1].split(', dintre')[0]
    #self.driver.close()
    
  def test_myanmar(self):
    self.driver.get("https://doph.maps.arcgis.com/apps/opsdashboard/index.html#/f8fb4ccc3d2d42c7ab0590dbb3fc26b8")
    time.sleep(30)
    self.vars["tests_cumulative"] = self.driver.find_element_by_id("ember20").text.split('\n')[1]
    self.driver.close()
  
  def test_nepal(self):
    self.driver.maximize_window()
    self.driver.set_page_load_timeout(60)
    self.driver.get("https://covid19.mohp.gov.np/")
    time.sleep(60)
    WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".ant-col-md-24 .ant-typography:nth-child(2)")))
    self.vars["tests_cumulative"] = self.driver.find_element(By.CSS_SELECTOR, ".ant-col-md-24 .ant-typography:nth-child(2)").text
    self.driver.close()

  def test_newCaledonia(self):
    self.driver.get("https://gouv.nc/coronavirus")
    self.driver.find_element(By.CSS_SELECTOR, ".quatre > .big-chiffre").click()
    self.vars["tests_cumulative"] = self.driver.find_element(By.CSS_SELECTOR, "#block-system-main > div > div > div > div.field.field-name-body > div.col-md-12.text-center.tableau_de_bord > div:nth-child(1) > div:nth-child(1) > div > div > div > p:nth-child(3)").text 
    self.driver.close()

  def test_newZealand(self):
    self.driver.get("https://www.health.govt.nz/our-work/diseases-and-conditions/covid-19-novel-coronavirus/covid-19-data-and-statistics/covid-19-testing-data")
    WebDriverWait(self.driver, 90).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".table-responsive:nth-child(9) tr:nth-child(1) > td")))
    self.vars["tests_cumulative"] = self.driver.find_element(By.CSS_SELECTOR, ".table-responsive:nth-child(9) tr:nth-child(1) > td").text
    self.driver.close()

  def test_northMacedonia(self):
    self.driver.maximize_window()
    self.driver.set_page_load_timeout(30)
    self.driver.get("https://datastudio.google.com/embed/u/0/reporting/9f5104d0-12fd-4e16-9a11-993685cfd40f/page/1M")
    WebDriverWait(self.driver, 90).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".cd-vmd90p9a8b .valueLabel")))
    self.vars["tests_cumulative"] = self.driver.find_element(By.CSS_SELECTOR, ".cd-vmd90p9a8b .valueLabel").text
    self.driver.close()

  def test_norway(self):
    self.driver.maximize_window()
    self.driver.set_page_load_timeout(30)
    self.driver.get("https://www.fhi.no/en/id/infectious-diseases/coronavirus/daily-reports/daily-reports-COVID19/")
    WebDriverWait(self.driver, 90).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".c-key-figure:nth-child(1) .c-key-figure__number > span")))
    self.vars["tests_cumulative"] = self.driver.find_element(By.CSS_SELECTOR, ".c-key-figure:nth-child(1) .c-key-figure__number > span").text
    self.driver.close()

  def test_occupiedPalestinianterritory(self):
    self.driver.maximize_window()
    self.driver.set_page_load_timeout(30)
    self.driver.get("https://corona.ps/")
    WebDriverWait(self.driver, 90).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".roundbox:nth-child(3) > div:nth-child(2)")))
    self.vars["tests_cumulative"] = self.driver.find_element(By.CSS_SELECTOR, ".roundbox:nth-child(3) > div:nth-child(2)").text
    self.driver.close()

  def test_pakistan(self):
    self.driver.get("https://covid.gov.pk/")
    time.sleep(30)
    self.driver.set_window_size(1536, 825)
    time.sleep(10)
    self.driver.execute_script("window.scrollTo(0,300)")
    self.vars["tests_cumulative"] = self.driver.find_element(By.CSS_SELECTOR, "body > div.nk-wrap > section:nth-child(4) > div > div.status > ul > li.active > div:nth-child(1) > span").text
    self.driver.close()
    
  # web page doesn't open
  def test_papuaNewGuinea(self):
    self.driver.get("https://covid19.info.gov.pg/")
    self.vars["tests_cumulative"] = self.driver.find_element(By.XPATH, "//article[@id=\'post-166\']/div/div/div/section[4]/div[2]/div/div[2]/div/div/section/div/div/div[2]/div/div/div/div/div/table/tbody/tr[11]/td[2]/p/span/span").text
    self.driver.close()

  def test_peru(self):
    self.driver.get("https://app.powerbi.com/view?r=eyJrIjoiOGU4MGE1NzItNmY1OC00ZTc2LThlYTItNWY2MzJhZjU5ZTM2IiwidCI6IjM0MGJjMDE2LWM2YTYtNDI2Ni05NGVjLWE3NDY0YmY5ZWM3MCIsImMiOjR9")
    time.sleep(10)
    self.vars["pcr_tests_cum"] = self.driver.find_element(By.XPATH, "//*[@id=\"pvExplorationHost\"]//div").text.split("\n")[40].replace(",","")
    self.vars["rapid_test_cum"] = self.driver.find_element(By.XPATH, "//*[@id=\"pvExplorationHost\"]//div").text.split("\n")[60].replace(",","")
    self.vars["tests_cumulative"] = int(self.vars["pcr_tests_cum"]) + int(self.vars["rapid_test_cum"])
    print(self.vars)
    self.driver.close()
    
  def test_portugal(self):
    self.driver.set_page_load_timeout(60)
    self.driver.get("https://esriportugal.maps.arcgis.com/apps/opsdashboard/index.html#/acf023da9a0b4f9dbb2332c13f635829")
    time.sleep(30)
    self.driver.find_element_by_id("ember8").click
    self.vars["tests_cumulative"] = self.driver.find_element_by_id("ember114").text
    self.vars["tests_cumulative"] = self.vars["tests_cumulative"].split('\n')[1]
    self.driver.close()

  def test_qatar(self):
    self.driver.get("https://covid19.moph.gov.qa/EN/Pages/default.aspx#")
    WebDriverWait(self.driver, 90).until(expected_conditions.visibility_of_element_located((By.ID, "strgPeopleTested")))
    self.vars["tests_cumulative"] = self.driver.find_element(By.ID, "strgPeopleTested").text
    self.driver.close()

  def test_republicofKorea(self):
    self.driver.maximize_window()
    self.driver.set_page_load_timeout(30)
    self.driver.get("http://ncov.mohw.go.kr/en/")
    WebDriverWait(self.driver, 90).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, "#header > div.main_container > div.m_t > div:nth-child(2) > div.mt_l > div.m_inspect_status > div > div.misi_l > div > ul > li:nth-child(1) > div.misil_r > span")))
    self.vars["tests_cumulative"] = self.driver.find_element(By.CSS_SELECTOR, "#header > div.main_container > div.m_t > div:nth-child(2) > div.mt_l > div.m_inspect_status > div > div.misi_l > div > ul > li:nth-child(1) > div.misil_r > span").text
    self.driver.close()
    
  def test_romania(self):
    self.driver.get("https://stirioficiale.ro/informatii")
    url = self.driver.find_element(By.XPATH, "//a[contains(text(),\'BULETIN DE PRESĂ\')]").get_attribute('href')
    self.driver.get(url)
    all_tests = self.driver.find_element(By.XPATH, "//p[contains(text(), \"Până la această dată, la nivel național, au fost prelucrate\")]").text
    self.vars["pcr_tests_cum"] = all_tests.split('Până la această dată, la nivel național, au fost prelucrate')[1].split('de teste')[0].replace(".","").replace(" ","")
    self.vars["rapid_test_cum"] = all_tests.split('Până la această dată, la nivel național, au fost prelucrate')[1].split('de teste RT-PCR și')[1].split('de teste')[0].replace(".","").replace(" ","")
    self.vars["tests_cumulative"] = int(self.vars["pcr_tests_cum"]) + int(self.vars["rapid_test_cum"])
    print(self.vars)
    self.driver.close()

  # def test_russia(self):
  #   self.driver.get("https://www.rospotrebnadzor.ru/about/info/news/")
  #   url = self.driver.find_element(By.XPATH, "//a[contains(text(),\'Информационный бюллетень о ситуации и принимаемых мерах по недопущению распространения заболеваний, вызванных новым коронавирусом\')]").get_attribute('href')
  #   self.driver.get(url)
  #   self.vars["tests_cumulative"] = self.driver.find_element(By.XPATH, "//p[contains(.,\'Учреждениями Роспотребнадзора и медицинскими организациями по состоянию на\')]").text
  #   self.vars["tests_cumulative"] = self.vars["tests_cumulative"].split('проведено')[1].split('лаборатор')[0]
  #   self.driver.close()

  def test_saintKittsandNevis(self):
    self.driver.get("https://covid19.gov.kn/stats2.php")
    time.sleep(5)
    self.vars["tests_cumulative"] = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(4) > td:nth-child(2)").text
    print(self.vars)
    self.driver.close()

  def test_saintLucia(self):
    self.driver.get("https://www.covid19response.lc/")
    WebDriverWait(self.driver, 90).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, "#w-tabs-0-data-w-tab-0 > div")))
    self.driver.find_element(By.CSS_SELECTOR, "#w-tabs-0-data-w-tab-0 > div").click()
    WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".test-stlucia")))
    self.vars["tests_cumulative"] = self.driver.find_element(By.CSS_SELECTOR, ".test-stlucia").text
    self.driver.close()

  def test_sanMarino(self):
    self.driver.get("http://www.iss.sm/on-line/home/artCataggiornamenti-coronavirus.49004093.1.20.1.html")
    url = self.driver.find_element(By.XPATH, "//a[contains(text(),\'Epidemia COVID-19\')]").get_attribute('href')
    self.driver.get(url)
    try:
      self.vars["tests_cumulative"] = self.driver.find_element(By.XPATH, "//strong[contains(.,\'Tamponi eseguiti\')]").text
    except NoSuchElementException:
      self.vars["tests_cumulative"] = self.driver.find_element(By.XPATH, "//strong[contains(.,\'tamponi totali eseguiti\')]").text
    self.driver.close()

  # def test_saudiArabia(self):
  #   self.driver.set_page_load_timeout(60)
  #   self.driver.get("https://saudimoh.maps.arcgis.com/apps/opsdashboard/index.html#/5f9cf2cc7c1a43ce8e9b90cda29634be")
  #   time.sleep(30)
  #   self.driver.switch_to.frame(0)
  #   time.sleep(30)
  #   self.vars["tests_cumulative"] = self.driver.find_element_by_id("ember110").text
  #   self.vars["tests_cumulative"] = self.vars["tests_cumulative"].split('\n')[1]
  #   self.driver.close()

  def test_serbia(self):
    self.driver.get("https://covid19.rs/")
    WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".elementor-element-6bfc932d .elementor-heading-title")))
    self.vars["tests_cumulative"] = self.driver.find_element(By.CSS_SELECTOR, ".elementor-element-6bfc932d .elementor-heading-title").text
    self.driver.close()

  def test_singapore(self):
    self.driver.get("https://www.moh.gov.sg/covid-19")
    WebDriverWait(self.driver, 90).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, "#ContentPlaceHolder_contentPlaceholder_C124_Col00 > div > div > table > tbody > tr:nth-child(2) > td > strong > span")))
    self.vars["tests_cumulative"] = self.driver.find_element(By.CSS_SELECTOR, "#ContentPlaceHolder_contentPlaceholder_C124_Col00 > div > div > table > tbody > tr:nth-child(2) > td > strong > span").text
    self.driver.close()

  def test_slovakia(self):
    self.driver.get("https://korona.gov.sk/")
    WebDriverWait(self.driver, 90).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, "#block_603780b691b98 > div > p")))
    pcr_test = self.driver.find_element(By.CSS_SELECTOR, "#block_603780b691b98 > div > p").text
    self.vars["pcr_tests_cum"] = pcr_test.split(":")[1].replace(" ","")
    rapid_test = self.driver.find_element(By.CSS_SELECTOR, "#block_60378ba2c4f83 > div > p").text
    self.vars["rapid_test_cum"] = rapid_test.split(":")[1].replace(" ","")
    self.vars["tests_cumulative"] = int(self.vars["pcr_tests_cum"]) + int(self.vars["rapid_test_cum"])
    print(self.vars)
    self.driver.close()

  def test_slovenia(self):
    self.driver.get("https://www.nijz.si/sl/dnevno-spremljanje-okuzb-s-sars-cov-2-covid-19")
    time.sleep(5)
    all_test = self.driver.find_element(By.XPATH, "//tbody").text
    self.vars["pcr_tests_cum"] = all_test.split('testiranih oseb s PCR')[0].split('\n')[-2].replace(".","")
    self.vars["rapid_test_cum"] = all_test.split('testiranih oseb s HAGT')[0].split('\n')[-2].replace(".","")
    self.vars["tests_cumulative"] = int(self.vars["pcr_tests_cum"]) + int(self.vars["rapid_test_cum"])
    print(self.vars)
    self.driver.close()

  def test_spain(self):
    self.driver.get("https://www.mscbs.gob.es/gabinete/notasPrensa.do")
    WebDriverWait(self.driver, 30).until(expected_conditions.element_to_be_clickable((By.XPATH, "//*[contains(text(), \"España ha realizado más de\")]/parent::p/a")))
    url = self.driver.find_element(By.XPATH, "//*[contains(text(), \"España ha realizado más de\")]/parent::p/a").get_attribute('href')
    self.driver.get(url)
    WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.XPATH, "//h2")))
    all_tests = self.driver.find_element(By.XPATH, "//section//div[3]//p[1]").text
    self.vars["tests_cumulative"] = all_tests.split('cabo un total de')[-1].strip().split(' ')[0].strip().replace(".","")
    self.vars["pcr_tests_cum"] = all_tests.split('De éstas,')[1].split("son PCR")[0].replace(".","")
    self.vars["rapid_test_cum"] = all_tests.split('son PCR y ')[1].split("son test de")[0].replace(".","")
    print(self.vars)
    self.driver.close()

  def test_sriLanka(self):
    self.driver.maximize_window()
    self.driver.set_page_load_timeout(30)
    self.driver.get("https://www.hpb.health.gov.lk/en")
    WebDriverWait(self.driver, 90).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".total-count")))
    self.vars["tests_cumulative"] = self.driver.find_element(By.CSS_SELECTOR, ".total-count").text
    self.driver.close()
    
  def test_switzerland(self):
    self.driver.get("https://www.covid19.admin.ch/en/overview?ovTime=total")
    self.vars["tests_cumulative"] = self.driver.find_element(By.CSS_SELECTOR, ".bag-key-value-list__combine-below:nth-child(2) .bag-key-value-list__entry-value").text
    self.vars["pcr_tests_cum"] = self.driver.find_element(By.CSS_SELECTOR, "bag-card-overview-test .bag-key-value-list__combine-above:nth-child(3) .bag-key-value-list__entry-value").text
    self.vars["rapid_test_cum"] = self.driver.find_element(By.CSS_SELECTOR, "bag-card-overview-test .bag-key-value-list__combine-above:nth-child(4) .bag-key-value-list__entry-value").text
    self.driver.close()

  def test_taiwan(self):
    self.driver.get("https://sites.google.com/cdc.gov.tw/2019-ncov/taiwan")
    self.driver.switch_to.frame(1)
    self.driver.switch_to.frame(0)
    self.driver.switch_to.frame(0)
    time.sleep(15)
    self.vars["tests_cumulative"] = self.driver.execute_script("x = document.getElementById(\'num9\').textContent; return x;")
    self.driver.close()

  #def test_thailand(self):
    #self.driver.get("https://ddc.moph.go.th/viralpneumonia/eng/index.php")
   # WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".w3-col:nth-child(1) > .mybg3 > .txt2")))
    #time.sleep(10)
    #self.vars["tests_cumulative"] = self.driver.find_element(By.CSS_SELECTOR, ".w3-col:nth-child(1) > .mybg3 > .txt2").text
    #self.driver.close()

  def test_turkey(self):
    self.driver.get("https://covid19.saglik.gov.tr/")
    WebDriverWait(self.driver, 90).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".toplam-test-sayisi")))
    self.vars["tests_cumulative"] = self.driver.find_element(By.CSS_SELECTOR, ".toplam-test-sayisi").text
    self.driver.close()

  def test_ukraine(self):
    self.driver.get("https://covid19.gov.ua/en/")
    WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".one-field:nth-child(6) > .field-value")))
    self.vars["tests_cumulative"] = self.driver.find_element(By.CSS_SELECTOR, ".one-field:nth-child(6) > .field-value").text
    self.driver.close()

  def test_unitedArabEmirates(self):
    self.driver.maximize_window()
    self.driver.set_page_load_timeout(60)
    self.driver.get("https://fcsa.gov.ae/en-us/Pages/Covid19/UAE-Covid-19-Updates.aspx")
    time.sleep(60)
    WebDriverWait(self.driver, 90).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".total_tests > .numbers")))
    self.vars["tests_cumulative"] = self.driver.find_element(By.CSS_SELECTOR, ".total_tests > .numbers").text
    self.driver.close()

  def test_unitedKingdom(self):
    self.driver.get("https://coronavirus.data.gov.uk/testing")
    time.sleep(30)
    WebDriverWait(self.driver, 90).until(expected_conditions.visibility_of_element_located((By.ID, "value-item-virus_tests_conducted-total-cumvirustests-1_modal")))
    time.sleep(30)
    self.vars["tests_cumulative"] = self.driver.find_element(By.ID, "value-item-virus_tests_conducted-total-cumvirustests-1_modal").text
    self.driver.close()
    
  def test_uruguay(self):
    self.driver.set_page_load_timeout(60)
    self.driver.get("https://coronavirusuy.maps.arcgis.com/apps/opsdashboard/index.html#/98155a4390b644308c453e5b20b2516e")
    time.sleep(30)
    self.vars["tests_cumulative"] = self.driver.find_element_by_id("ember10").text
    self.vars["tests_cumulative"] = self.vars["tests_cumulative"].split('\n')[1]
    self.driver.close()
    
  def test_uS(self):
    self.driver.get("https://gisanddata.maps.arcgis.com/apps/opsdashboard/index.html#/bda7594740fd40299423467b48e9ecf6")
    time.sleep(60)
    self.vars["tests_cumulative"] = self.driver.find_element(By.CSS_SELECTOR, "#ember123").text
    self.vars["tests_cumulative"] = self.vars["tests_cumulative"].split("\n")[1]
    print(self.vars)
    self.driver.close()

  def test_venezuela(self):
    self.driver.get("https://covid19.patria.org.ve/noticia/")
    url=self.driver.find_element(By.XPATH, "//a[contains(text(),\'lucha contra la COVID-19\')]").get_attribute('href')
    self.driver.get(url)
    try:
        self.vars["tests_cumulative"] = self.driver.find_element(By.XPATH, "//p[contains(.,\'se han realizado\')]").text
        self.vars["tests_cumulative"] = self.vars["tests_cumulative"].split('realizado')[1].split('prueba')[0]
    except NoSuchElementException:
        self.vars["tests_cumulative"] = {}
    self.driver.close()

  # Africa web site 
  def test_algeria(self):
    self.driver.get("https://africacdc.maps.arcgis.com/apps/opsdashboard/index.html#/9d8d4add4dcb456997fd83607b5d0c7c")
    continent = WebDriverWait(self.driver, 40).until(expected_conditions.presence_of_element_located((By.ID, "Dashboard_1day_Sht1_5411_layer")))
    all_countries = self.driver.find_elements_by_tag_name('circle')
    final_tests = ""
    for country in all_countries:
        try:
            country.click()
            temp_name = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(1) > td:nth-child(2)").text
            if temp_name == 'Algeria':
                final_tests = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(8) .esriNumericValue").text
                break
            else:
                self.driver.find_element_by_id('esri.Map_0_gc').click()
        except:
            pass

    self.vars["tests_cumulative"] = final_tests
    self.driver.close()
    self.driver.quit()
    if self.vars["tests_cumulative"]=="":
      url_coord = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/NEW_Dashboard/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_coord = requests.get(url_coord)
      cont_coord = json.loads(r_coord.content)
      
      for idx in cont_coord['features']:
         if idx['attributes']['Country'] == 'Algeria':
             x_coord = idx['geometry']['x']
             y_coord = idx['geometry']['y']
             break
      
      url_tests = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/Dashboard_1day_Sht1/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C+Tests&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_tests = requests.get(url_tests)
      cont_tests = json.loads(r_tests.content)
      
      for idx in cont_tests['features']:
          if idx['geometry']['x'] == x_coord and idx['geometry']['y'] == y_coord:
              self.vars["tests_cumulative"] = idx['attributes']['Tests']
              break

  def test_angola(self):
    self.driver.get("https://africacdc.maps.arcgis.com/apps/opsdashboard/index.html#/9d8d4add4dcb456997fd83607b5d0c7c")
    continent = WebDriverWait(self.driver, 40).until(expected_conditions.presence_of_element_located((By.ID, "Dashboard_1day_Sht1_5411_layer")))
    all_countries = self.driver.find_elements_by_tag_name('circle')
    final_tests = ""
    for country in all_countries:
        try:
            country.click()
            temp_name = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(1) > td:nth-child(2)").text
            if temp_name == 'Angola':
                final_tests = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(8) .esriNumericValue").text
                break
            else:
                self.driver.find_element_by_id('esri.Map_0_gc').click()
        except:
            pass

    self.vars["tests_cumulative"] = final_tests
    self.driver.close()
    self.driver.quit()
    # When dahsboard doesn't have country names, the json from the arcgis API is used
    if self.vars["tests_cumulative"]=="":
      url_coord = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/NEW_Dashboard/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_coord = requests.get(url_coord)
      cont_coord = json.loads(r_coord.content)
      
      for idx in cont_coord['features']:
         if idx['attributes']['Country'] == 'Angola':
             x_coord = idx['geometry']['x']
             y_coord = idx['geometry']['y']
             break
      
      url_tests = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/Dashboard_1day_Sht1/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C+Tests&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_tests = requests.get(url_tests)
      cont_tests = json.loads(r_tests.content)
      
      for idx in cont_tests['features']:
          if idx['geometry']['x'] == x_coord and idx['geometry']['y'] == -1386216.3500460347:
              self.vars["tests_cumulative"] = idx['attributes']['Tests']
              break
              
      print(self.vars)

  def test_botswana(self):
    self.driver.get("https://africacdc.maps.arcgis.com/apps/opsdashboard/index.html#/9d8d4add4dcb456997fd83607b5d0c7c")
    continent = WebDriverWait(self.driver, 40).until(expected_conditions.presence_of_element_located((By.ID, "Dashboard_1day_Sht1_5411_layer")))
    all_countries = self.driver.find_elements_by_tag_name('circle')
    final_tests = ""
    for country in all_countries:
        try:
            country.click()
            temp_name = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(1) > td:nth-child(2)").text
            if temp_name == 'Botswana':
                final_tests = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(8) .esriNumericValue").text
                break
            else:
                self.driver.find_element_by_id('esri.Map_0_gc').click()
        except:
            pass

    self.vars["tests_cumulative"] = final_tests
    self.driver.close()
    self.driver.quit()
    # When dahsboard doesn't have country names, the json from the arcgis API is used
    if self.vars["tests_cumulative"]=="":
      url_coord = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/NEW_Dashboard/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_coord = requests.get(url_coord)
      cont_coord = json.loads(r_coord.content)
      
      for idx in cont_coord['features']:
         if idx['attributes']['Country'] == 'Botswana':
             x_coord = idx['geometry']['x']
             y_coord = idx['geometry']['y']
             break
      
      url_tests = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/Dashboard_1day_Sht1/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C+Tests&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_tests = requests.get(url_tests)
      cont_tests = json.loads(r_tests.content)
      
      for idx in cont_tests['features']:
          if idx['geometry']['x'] == x_coord and idx['geometry']['y'] == y_coord:
              self.vars["tests_cumulative"] = idx['attributes']['Tests']
              break

  def test_burkinaFaso(self):
    self.driver.get("https://africacdc.maps.arcgis.com/apps/opsdashboard/index.html#/9d8d4add4dcb456997fd83607b5d0c7c")
    continent = WebDriverWait(self.driver, 40).until(expected_conditions.presence_of_element_located((By.ID, "Dashboard_1day_Sht1_5411_layer")))
    all_countries = self.driver.find_elements_by_tag_name('circle')
    final_tests = ""
    for country in all_countries:
        try:
            country.click()
            temp_name = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(1) > td:nth-child(2)").text
            if temp_name == 'Burkina Faso':
                final_tests = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(8) .esriNumericValue").text
                break
            else:
                self.driver.find_element_by_id('esri.Map_0_gc').click()
        except:
            pass

    self.vars["tests_cumulative"] = final_tests
    self.driver.close()
    self.driver.quit()
    # When dahsboard doesn't have country names, the json from the arcgis API is used
    if self.vars["tests_cumulative"]=="":
      url_coord = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/NEW_Dashboard/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_coord = requests.get(url_coord)
      cont_coord = json.loads(r_coord.content)
      
      for idx in cont_coord['features']:
         if idx['attributes']['Country'] == 'Burkina Faso':
             x_coord = idx['geometry']['x']
             y_coord = idx['geometry']['y']
             break
      
      url_tests = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/Dashboard_1day_Sht1/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C+Tests&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_tests = requests.get(url_tests)
      cont_tests = json.loads(r_tests.content)
      
      for idx in cont_tests['features']:
          if idx['geometry']['x'] == x_coord and idx['geometry']['y'] == 1377995.3392879416:
              self.vars["tests_cumulative"] = idx['attributes']['Tests']
              break
              
      print(self.vars)

  def test_burundi(self):
    self.driver.get("https://africacdc.maps.arcgis.com/apps/opsdashboard/index.html#/9d8d4add4dcb456997fd83607b5d0c7c")
    continent = WebDriverWait(self.driver, 40).until(expected_conditions.presence_of_element_located((By.ID, "Dashboard_1day_Sht1_5411_layer")))
    all_countries = self.driver.find_elements_by_tag_name('circle')
    final_tests = ""
    for country in all_countries:
        try:
            country.click()
            temp_name = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(1) > td:nth-child(2)").text
            if temp_name == 'Burundi':
                final_tests = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(8) .esriNumericValue").text
                break
            else:
                self.driver.find_element_by_id('esri.Map_0_gc').click()
        except:
            pass

    self.vars["tests_cumulative"] = final_tests
    self.driver.close()
    self.driver.quit()
    # When dahsboard doesn't have country names, the json from the arcgis API is used
    if self.vars["tests_cumulative"]=="":
      url_coord = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/NEW_Dashboard/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_coord = requests.get(url_coord)
      cont_coord = json.loads(r_coord.content)
      
      for idx in cont_coord['features']:
         if idx['attributes']['Country'] == 'Burundi':
             x_coord = idx['geometry']['x']
             y_coord = idx['geometry']['y']
             break
      
      url_tests = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/Dashboard_1day_Sht1/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C+Tests&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_tests = requests.get(url_tests)
      cont_tests = json.loads(r_tests.content)
      
      for idx in cont_tests['features']:
          if idx['geometry']['x'] == x_coord and idx['geometry']['y'] == -374500.07320329087:
              self.vars["tests_cumulative"] = idx['attributes']['Tests']
              break
              
      print(self.vars)

  def test_cameroon(self):
    self.driver.get("https://africacdc.maps.arcgis.com/apps/opsdashboard/index.html#/9d8d4add4dcb456997fd83607b5d0c7c")
    continent = WebDriverWait(self.driver, 40).until(expected_conditions.presence_of_element_located((By.ID, "Dashboard_1day_Sht1_5411_layer")))
    all_countries = self.driver.find_elements_by_tag_name('circle')
    final_tests = ""
    for country in all_countries:
        try:
            country.click()
            temp_name = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(1) > td:nth-child(2)").text
            if temp_name == 'Cameroon':
                final_tests = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(8) .esriNumericValue").text
                break
            else:
                self.driver.find_element_by_id('esri.Map_0_gc').click()
        except:
            pass

    self.vars["tests_cumulative"] = final_tests
    self.driver.close()
    self.driver.quit()
    # When dahsboard doesn't have country names, the json from the arcgis API is used
    if self.vars["tests_cumulative"]=="":
      url_coord = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/NEW_Dashboard/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_coord = requests.get(url_coord)
      cont_coord = json.loads(r_coord.content)
      
      for idx in cont_coord['features']:
         if idx['attributes']['Country'] == 'Cameroon':
             x_coord = idx['geometry']['x']
             y_coord = idx['geometry']['y']
             break
      
      url_tests = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/Dashboard_1day_Sht1/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C+Tests&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_tests = requests.get(url_tests)
      cont_tests = json.loads(r_tests.content)
      
      for idx in cont_tests['features']:
          if idx['geometry']['x'] == x_coord and idx['geometry']['y'] == 636719.8409593389:
              self.vars["tests_cumulative"] = idx['attributes']['Tests']
              break

  def test_capeVerde(self):
    self.driver.get("https://africacdc.maps.arcgis.com/apps/opsdashboard/index.html#/9d8d4add4dcb456997fd83607b5d0c7c")
    continent = WebDriverWait(self.driver, 40).until(expected_conditions.presence_of_element_located((By.ID, "Dashboard_1day_Sht1_5411_layer")))
    all_countries = self.driver.find_elements_by_tag_name('circle')
    final_tests = ""
    for country in all_countries:
        try:
            country.click()
            temp_name = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(1) > td:nth-child(2)").text
            if temp_name == 'Cabo Verde':
                final_tests = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(8) .esriNumericValue").text
                break
            else:
                self.driver.find_element_by_id('esri.Map_0_gc').click()
        except:
            pass

    self.vars["tests_cumulative"] = final_tests
    self.driver.close()
    self.driver.quit()
    # When dahsboard doesn't have country names, the json from the arcgis API is used
    if self.vars["tests_cumulative"]=="":
      url_coord = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/NEW_Dashboard/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_coord = requests.get(url_coord)
      cont_coord = json.loads(r_coord.content)
      
      for idx in cont_coord['features']:
         if idx['attributes']['Country'] == 'Cabo Verde':
             x_coord = idx['geometry']['x']
             y_coord = idx['geometry']['y']
             break
      
      url_tests = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/Dashboard_1day_Sht1/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C+Tests&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_tests = requests.get(url_tests)
      cont_tests = json.loads(r_tests.content)
      
      for idx in cont_tests['features']:
          if idx['geometry']['x'] == x_coord and idx['geometry']['y'] == y_coord:
              self.vars["tests_cumulative"] = idx['attributes']['Tests']
              break

  def test_centralAfricanRepublic(self):
    self.driver.get("https://africacdc.maps.arcgis.com/apps/opsdashboard/index.html#/9d8d4add4dcb456997fd83607b5d0c7c")
    continent = WebDriverWait(self.driver, 40).until(expected_conditions.presence_of_element_located((By.ID, "Dashboard_1day_Sht1_5411_layer")))
    all_countries = self.driver.find_elements_by_tag_name('circle')
    final_tests = ""
    for country in all_countries:
        try:
            country.click()
            temp_name = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(1) > td:nth-child(2)").text
            if temp_name == 'Central African Republic':
                final_tests = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(8) .esriNumericValue").text
                break
            else:
                self.driver.find_element_by_id('esri.Map_0_gc').click()
        except:
            pass

    self.vars["tests_cumulative"] = final_tests
    self.driver.close()
    self.driver.quit()
    # When dahsboard doesn't have country names, the json from the arcgis API is used
    if self.vars["tests_cumulative"]=="":
      url_coord = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/NEW_Dashboard/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_coord = requests.get(url_coord)
      cont_coord = json.loads(r_coord.content)
      
      for idx in cont_coord['features']:
         if idx['attributes']['Country'] == 'Central African Republic':
             x_coord = idx['geometry']['x']
             y_coord = idx['geometry']['y']
             break
      
      url_tests = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/Dashboard_1day_Sht1/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C+Tests&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_tests = requests.get(url_tests)
      cont_tests = json.loads(r_tests.content)
      
      for idx in cont_tests['features']:
          if idx['geometry']['x'] == x_coord and idx['geometry']['y'] == y_coord:
              self.vars["tests_cumulative"] = idx['attributes']['Tests']
              break

  def test_chad(self):
    self.driver.get("https://africacdc.maps.arcgis.com/apps/opsdashboard/index.html#/9d8d4add4dcb456997fd83607b5d0c7c")
    continent = WebDriverWait(self.driver, 40).until(expected_conditions.presence_of_element_located((By.ID, "Dashboard_1day_Sht1_5411_layer")))
    all_countries = self.driver.find_elements_by_tag_name('circle')
    final_tests = ""
    for country in all_countries:
        try:
            country.click()
            temp_name = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(1) > td:nth-child(2)").text
            if temp_name == 'Chad':
                final_tests = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(8) .esriNumericValue").text
                break
            else:
                self.driver.find_element_by_id('esri.Map_0_gc').click()
        except:
            pass

    self.vars["tests_cumulative"] = final_tests
    self.driver.close()
    self.driver.quit()
    # When dahsboard doesn't have country names, the json from the arcgis API is used
    if self.vars["tests_cumulative"]=="":
      url_coord = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/NEW_Dashboard/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_coord = requests.get(url_coord)
      cont_coord = json.loads(r_coord.content)
      
      for idx in cont_coord['features']:
         if idx['attributes']['Country'] == 'Chad':
             x_coord = idx['geometry']['x']
             y_coord = idx['geometry']['y']
             break
      
      url_tests = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/Dashboard_1day_Sht1/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C+Tests&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_tests = requests.get(url_tests)
      cont_tests = json.loads(r_tests.content)
      
      for idx in cont_tests['features']:
          if idx['geometry']['x'] == x_coord and idx['geometry']['y'] == y_coord:
              self.vars["tests_cumulative"] = idx['attributes']['Tests']
              break

  def test_comoros(self):
    self.driver.get("https://africacdc.maps.arcgis.com/apps/opsdashboard/index.html#/9d8d4add4dcb456997fd83607b5d0c7c")
    continent = WebDriverWait(self.driver, 40).until(expected_conditions.presence_of_element_located((By.ID, "Dashboard_1day_Sht1_5411_layer")))
    all_countries = self.driver.find_elements_by_tag_name('circle')
    final_tests = ""
    for country in all_countries:
        try:
            country.click()
            temp_name = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(1) > td:nth-child(2)").text
            if temp_name == 'Comoros':
                final_tests = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(8) .esriNumericValue").text
                break
            else:
                self.driver.find_element_by_id('esri.Map_0_gc').click()
        except:
            pass

    self.vars["tests_cumulative"] = final_tests
    self.driver.close()
    self.driver.quit()
    # When dahsboard doesn't have country names, the json from the arcgis API is used
    if self.vars["tests_cumulative"]=="":
      url_coord = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/NEW_Dashboard/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_coord = requests.get(url_coord)
      cont_coord = json.loads(r_coord.content)
      
      for idx in cont_coord['features']:
         if idx['attributes']['Country'] == 'Comoros':
             x_coord = idx['geometry']['x']
             y_coord = idx['geometry']['y']
             break
      
      url_tests = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/Dashboard_1day_Sht1/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C+Tests&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_tests = requests.get(url_tests)
      cont_tests = json.loads(r_tests.content)
      
      for idx in cont_tests['features']:
          if idx['geometry']['x'] == x_coord and idx['geometry']['y'] == y_coord:
              self.vars["tests_cumulative"] = idx['attributes']['Tests']
              break

  def test_cotedIvoire(self):
    self.driver.get("https://africacdc.maps.arcgis.com/apps/opsdashboard/index.html#/9d8d4add4dcb456997fd83607b5d0c7c")
    continent = WebDriverWait(self.driver, 40).until(expected_conditions.presence_of_element_located((By.ID, "Dashboard_1day_Sht1_5411_layer")))
    all_countries = self.driver.find_elements_by_tag_name('circle')
    final_tests = ""
    for country in all_countries:
        try:
            country.click()
            temp_name = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(1) > td:nth-child(2)").text
            if temp_name == "Cote d'Ivoire":
                final_tests = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(8) .esriNumericValue").text
                break
            else:
                self.driver.find_element_by_id('esri.Map_0_gc').click()
        except:
            pass

    self.vars["tests_cumulative"] = final_tests
    self.driver.close()
    self.driver.quit()
    # When dahsboard doesn't have country names, the json from the arcgis API is used
    if self.vars["tests_cumulative"]=="":
      url_coord = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/NEW_Dashboard/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_coord = requests.get(url_coord)
      cont_coord = json.loads(r_coord.content)
      
      for idx in cont_coord['features']:
         if idx['attributes']['Country'] == "Cote d'Ivoire":
             x_coord = idx['geometry']['x']
             y_coord = idx['geometry']['y']
             break
      
      url_tests = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/Dashboard_1day_Sht1/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C+Tests&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_tests = requests.get(url_tests)
      cont_tests = json.loads(r_tests.content)
      
      for idx in cont_tests['features']:
          if idx['geometry']['x'] == x_coord and idx['geometry']['y'] == y_coord:
              self.vars["tests_cumulative"] = idx['attributes']['Tests']
              break

  def test_democraticRepublicoftheCongo(self):
    self.driver.get("https://africacdc.maps.arcgis.com/apps/opsdashboard/index.html#/9d8d4add4dcb456997fd83607b5d0c7c")
    continent = WebDriverWait(self.driver, 40).until(expected_conditions.presence_of_element_located((By.ID, "Dashboard_1day_Sht1_5411_layer")))
    all_countries = self.driver.find_elements_by_tag_name('circle')
    final_tests = ""
    for country in all_countries:
        try:
            country.click()
            temp_name = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(1) > td:nth-child(2)").text
            if temp_name == "Democratic Republic of the Congo":
                final_tests = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(8) .esriNumericValue").text
                break
            else:
                self.driver.find_element_by_id('esri.Map_0_gc').click()
        except:
            pass

    self.vars["tests_cumulative"] = final_tests
    self.driver.close()
    self.driver.quit()
    # When dahsboard doesn't have country names, the json from the arcgis API is used
    if self.vars["tests_cumulative"]=="":
      url_coord = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/NEW_Dashboard/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_coord = requests.get(url_coord)
      cont_coord = json.loads(r_coord.content)
      
      for idx in cont_coord['features']:
         if idx['attributes']['Country'] == 'Democratic Republic of the Congo':
             x_coord = idx['geometry']['x']
             y_coord = idx['geometry']['y']
             break
      
      url_tests = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/Dashboard_1day_Sht1/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C+Tests&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_tests = requests.get(url_tests)
      cont_tests = json.loads(r_tests.content)
      
      for idx in cont_tests['features']:
          if idx['geometry']['x'] == x_coord and idx['geometry']['y'] == y_coord:
              self.vars["tests_cumulative"] = idx['attributes']['Tests']
              break

  def test_djibouti(self):
    self.driver.get("https://africacdc.maps.arcgis.com/apps/opsdashboard/index.html#/9d8d4add4dcb456997fd83607b5d0c7c")
    continent = WebDriverWait(self.driver, 40).until(expected_conditions.presence_of_element_located((By.ID, "Dashboard_1day_Sht1_5411_layer")))
    all_countries = self.driver.find_elements_by_tag_name('circle')
    final_tests = ""
    for country in all_countries:
        try:
            country.click()
            temp_name = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(1) > td:nth-child(2)").text
            if temp_name == "Djibouti":
                final_tests = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(8) .esriNumericValue").text
                break
            else:
                self.driver.find_element_by_id('esri.Map_0_gc').click()
        except:
            pass

    self.vars["tests_cumulative"] = final_tests
    self.driver.close()
    self.driver.quit()
    # When dahsboard doesn't have country names, the json from the arcgis API is used
    if self.vars["tests_cumulative"]=="":
      url_coord = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/NEW_Dashboard/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_coord = requests.get(url_coord)
      cont_coord = json.loads(r_coord.content)
      
      for idx in cont_coord['features']:
         if idx['attributes']['Country'] == 'Djibouti':
             x_coord = idx['geometry']['x']
             y_coord = idx['geometry']['y']
             break
      
      url_tests = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/Dashboard_1day_Sht1/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C+Tests&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_tests = requests.get(url_tests)
      cont_tests = json.loads(r_tests.content)
      
      for idx in cont_tests['features']:
          if idx['geometry']['x'] == x_coord and idx['geometry']['y'] == y_coord:
              self.vars["tests_cumulative"] = idx['attributes']['Tests']
              break

  def test_egypt(self):
    self.driver.get("https://africacdc.maps.arcgis.com/apps/opsdashboard/index.html#/9d8d4add4dcb456997fd83607b5d0c7c")
    continent = WebDriverWait(self.driver, 40).until(expected_conditions.presence_of_element_located((By.ID, "Dashboard_1day_Sht1_5411_layer")))
    all_countries = self.driver.find_elements_by_tag_name('circle')
    final_tests = ""
    for country in all_countries:
        try:
            country.click()
            temp_name = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(1) > td:nth-child(2)").text
            if temp_name == "Egypt":
                final_tests = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(8) .esriNumericValue").text
                break
            else:
                self.driver.find_element_by_id('esri.Map_0_gc').click()
        except:
            pass

    self.vars["tests_cumulative"] = final_tests
    self.driver.close()
    self.driver.quit()
    # When dahsboard doesn't have country names, the json from the arcgis API is used
    if self.vars["tests_cumulative"]=="":
      url_coord = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/NEW_Dashboard/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_coord = requests.get(url_coord)
      cont_coord = json.loads(r_coord.content)
      
      for idx in cont_coord['features']:
         if idx['attributes']['Country'] == 'Egypt':
             x_coord = idx['geometry']['x']
             y_coord = idx['geometry']['y']
             break
      
      url_tests = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/Dashboard_1day_Sht1/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C+Tests&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_tests = requests.get(url_tests)
      cont_tests = json.loads(r_tests.content)
      
      for idx in cont_tests['features']:
          if idx['geometry']['x'] == x_coord and idx['geometry']['y'] == y_coord:
              self.vars["tests_cumulative"] = idx['attributes']['Tests']
              break

  def test_equatorialGuinea(self):
    self.driver.get("https://africacdc.maps.arcgis.com/apps/opsdashboard/index.html#/9d8d4add4dcb456997fd83607b5d0c7c")
    continent = WebDriverWait(self.driver, 40).until(expected_conditions.presence_of_element_located((By.ID, "Dashboard_1day_Sht1_5411_layer")))
    all_countries = self.driver.find_elements_by_tag_name('circle')
    final_tests = ""
    for country in all_countries:
        try:
            country.click()
            temp_name = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(1) > td:nth-child(2)").text
            if temp_name == "Equatorial Guinea":
                final_tests = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(8) .esriNumericValue").text
                break
            else:
                self.driver.find_element_by_id('esri.Map_0_gc').click()
        except:
            pass

    self.vars["tests_cumulative"] = final_tests
    self.driver.close()
    self.driver.quit()
    # When dahsboard doesn't have country names, the json from the arcgis API is used
    if self.vars["tests_cumulative"]=="":
      url_coord = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/NEW_Dashboard/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_coord = requests.get(url_coord)
      cont_coord = json.loads(r_coord.content)
      
      for idx in cont_coord['features']:
         if idx['attributes']['Country'] == 'Equitorial Guinea':
             x_coord = idx['geometry']['x']
             y_coord = idx['geometry']['y']
             break
      
      url_tests = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/Dashboard_1day_Sht1/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C+Tests&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_tests = requests.get(url_tests)
      cont_tests = json.loads(r_tests.content)
      
      for idx in cont_tests['features']:
          if idx['geometry']['x'] == 1150559.2950174978 and idx['geometry']['y'] == y_coord:
              self.vars["tests_cumulative"] = idx['attributes']['Tests']
              break

  def test_eritrea(self):
    self.driver.get("https://africacdc.maps.arcgis.com/apps/opsdashboard/index.html#/9d8d4add4dcb456997fd83607b5d0c7c")
    continent = WebDriverWait(self.driver, 40).until(expected_conditions.presence_of_element_located((By.ID, "Dashboard_1day_Sht1_5411_layer")))
    all_countries = self.driver.find_elements_by_tag_name('circle')
    final_tests = ""
    for country in all_countries:
        try:
            country.click()
            temp_name = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(1) > td:nth-child(2)").text
            if temp_name == "Eritrea":
                final_tests = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(8) .esriNumericValue").text
                break
            else:
                self.driver.find_element_by_id('esri.Map_0_gc').click()
        except:
            pass

    self.vars["tests_cumulative"] = final_tests
    self.driver.close()
    self.driver.quit()
    # When dahsboard doesn't have country names, the json from the arcgis API is used
    if self.vars["tests_cumulative"]=="":
      url_coord = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/NEW_Dashboard/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_coord = requests.get(url_coord)
      cont_coord = json.loads(r_coord.content)
      
      for idx in cont_coord['features']:
         if idx['attributes']['Country'] == 'Eritrea':
             x_coord = idx['geometry']['x']
             y_coord = idx['geometry']['y']
             break
      
      url_tests = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/Dashboard_1day_Sht1/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C+Tests&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_tests = requests.get(url_tests)
      cont_tests = json.loads(r_tests.content)
      
      for idx in cont_tests['features']:
          if idx['geometry']['x'] == x_coord and idx['geometry']['y'] == y_coord:
              self.vars["tests_cumulative"] = idx['attributes']['Tests']
              break

  def test_eswatini(self):
    self.driver.set_page_load_timeout(60)
    self.driver.get("https://africacdc.maps.arcgis.com/apps/opsdashboard/index.html#/9d8d4add4dcb456997fd83607b5d0c7c")
    continent = WebDriverWait(self.driver, 40).until(expected_conditions.presence_of_element_located((By.ID, "Dashboard_1day_Sht1_5411_layer")))
    all_countries = self.driver.find_elements_by_tag_name('circle')
    final_tests = ""
    for country in all_countries:
        try:
            country.click()
            temp_name = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(1) > td:nth-child(2)").text
            if temp_name == "Eswatini":
                final_tests = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(8) .esriNumericValue").text
                break
            else:
                self.driver.find_element_by_id('esri.Map_0_gc').click()
        except:
            pass

    self.vars["tests_cumulative"] = final_tests
    self.driver.close()
    self.driver.quit()
    # When dahsboard doesn't have country names, the json from the arcgis API is used
    if self.vars["tests_cumulative"]=="":
      url_coord = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/NEW_Dashboard/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_coord = requests.get(url_coord)
      cont_coord = json.loads(r_coord.content)
      for idx in cont_coord['features']:
         if idx['attributes']['Country'] == 'Eswatini ':
             x_coord = idx['geometry']['x']
             y_coord = idx['geometry']['y']
             break
      
      url_tests = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/Dashboard_1day_Sht1/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C+Tests&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_tests = requests.get(url_tests)
      cont_tests = json.loads(r_tests.content)
      
      for idx in cont_tests['features']:
          if idx['geometry']['x'] == x_coord and idx['geometry']['y'] == y_coord:
              self.vars["tests_cumulative"] = idx['attributes']['Tests']
              break

  def test_ethiopia(self):
    self.driver.set_page_load_timeout(60)
    self.driver.get("https://africacdc.maps.arcgis.com/apps/opsdashboard/index.html#/9d8d4add4dcb456997fd83607b5d0c7c")
    continent = WebDriverWait(self.driver, 40).until(expected_conditions.presence_of_element_located((By.ID, "Dashboard_1day_Sht1_5411_layer")))
    all_countries = self.driver.find_elements_by_tag_name('circle')
    final_tests = ""
    for country in all_countries:
        try:
            country.click()
            temp_name = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(1) > td:nth-child(2)").text
            if temp_name == "Ethiopia":
                final_tests = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(8) .esriNumericValue").text
                break
            else:
                self.driver.find_element_by_id('esri.Map_0_gc').click()
        except:
            pass

    self.vars["tests_cumulative"] = final_tests
    self.driver.close()
    self.driver.quit()
    # When dahsboard doesn't have country names, the json from the arcgis API is used
    if self.vars["tests_cumulative"]=="":
      url_coord = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/NEW_Dashboard/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_coord = requests.get(url_coord)
      cont_coord = json.loads(r_coord.content)
      
      for idx in cont_coord['features']:
         if idx['attributes']['Country'] == 'Ethiopia':
             x_coord = idx['geometry']['x']
             y_coord = idx['geometry']['y']
             break
      
      url_tests = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/Dashboard_1day_Sht1/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C+Tests&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_tests = requests.get(url_tests)
      cont_tests = json.loads(r_tests.content)
      
      for idx in cont_tests['features']:
          if idx['geometry']['x'] == x_coord and idx['geometry']['y'] == y_coord:
              self.vars["tests_cumulative"] = idx['attributes']['Tests']
              break

  def test_gabon(self):
    self.driver.get("https://africacdc.maps.arcgis.com/apps/opsdashboard/index.html#/9d8d4add4dcb456997fd83607b5d0c7c")
    continent = WebDriverWait(self.driver, 40).until(expected_conditions.presence_of_element_located((By.ID, "Dashboard_1day_Sht1_5411_layer")))
    all_countries = self.driver.find_elements_by_tag_name('circle')
    final_tests = ""
    for country in all_countries:
        try:
            country.click()
            temp_name = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(1) > td:nth-child(2)").text
            if temp_name == "Gabon":
                final_tests = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(8) .esriNumericValue").text
                break
            else:
                self.driver.find_element_by_id('esri.Map_0_gc').click()
        except:
            pass

    self.vars["tests_cumulative"] = final_tests
    self.driver.close()
    self.driver.quit()
    # When dahsboard doesn't have country names, the json from the arcgis API is used
    if self.vars["tests_cumulative"]=="":
      url_coord = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/NEW_Dashboard/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_coord = requests.get(url_coord)
      cont_coord = json.loads(r_coord.content)
      
      for idx in cont_coord['features']:
         if idx['attributes']['Country'] == 'Gabon':
             x_coord = idx['geometry']['x']
             y_coord = idx['geometry']['y']
             break
      
      url_tests = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/Dashboard_1day_Sht1/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C+Tests&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_tests = requests.get(url_tests)
      cont_tests = json.loads(r_tests.content)
      
      for idx in cont_tests['features']:
          if idx['geometry']['x'] == x_coord and idx['geometry']['y'] == y_coord:
              self.vars["tests_cumulative"] = idx['attributes']['Tests']
              break

  def test_ghana(self):
    self.driver.get("https://africacdc.maps.arcgis.com/apps/opsdashboard/index.html#/9d8d4add4dcb456997fd83607b5d0c7c")
    continent = WebDriverWait(self.driver, 40).until(expected_conditions.presence_of_element_located((By.ID, "Dashboard_1day_Sht1_5411_layer")))
    all_countries = self.driver.find_elements_by_tag_name('circle')
    final_tests = ""
    for country in all_countries:
        try:
            country.click()
            temp_name = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(1) > td:nth-child(2)").text
            if temp_name == "Ghana":
                final_tests = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(8) .esriNumericValue").text
                break
            else:
                self.driver.find_element_by_id('esri.Map_0_gc').click()
        except:
            pass

    self.vars["tests_cumulative"] = final_tests
    self.driver.close()
    self.driver.quit()
    # When dahsboard doesn't have country names, the json from the arcgis API is used
    if self.vars["tests_cumulative"]=="":
      url_coord = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/NEW_Dashboard/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_coord = requests.get(url_coord)
      cont_coord = json.loads(r_coord.content)
      
      for idx in cont_coord['features']:
         if idx['attributes']['Country'] == 'Ghana':
             x_coord = idx['geometry']['x']
             y_coord = idx['geometry']['y']
             break
      
      url_tests = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/Dashboard_1day_Sht1/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C+Tests&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_tests = requests.get(url_tests)
      cont_tests = json.loads(r_tests.content)
      
      for idx in cont_tests['features']:
          if idx['geometry']['x'] == x_coord and idx['geometry']['y'] == y_coord:
              self.vars["tests_cumulative"] = idx['attributes']['Tests']
              break

  def test_guinea(self):
    self.driver.get("https://africacdc.maps.arcgis.com/apps/opsdashboard/index.html#/9d8d4add4dcb456997fd83607b5d0c7c")
    continent = WebDriverWait(self.driver, 40).until(expected_conditions.presence_of_element_located((By.ID, "Dashboard_1day_Sht1_5411_layer")))
    all_countries = self.driver.find_elements_by_tag_name('circle')
    final_tests = ""
    for country in all_countries:
        try:
            country.click()
            temp_name = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(1) > td:nth-child(2)").text
            if temp_name == "Guinea":
                final_tests = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(8) .esriNumericValue").text
                break
            else:
                self.driver.find_element_by_id('esri.Map_0_gc').click()
        except:
            pass

    self.vars["tests_cumulative"] = final_tests
    self.driver.close()
    self.driver.quit()
    # When dahsboard doesn't have country names, the json from the arcgis API is used
    if self.vars["tests_cumulative"]=="":
      url_coord = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/NEW_Dashboard/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_coord = requests.get(url_coord)
      cont_coord = json.loads(r_coord.content)
      
      for idx in cont_coord['features']:
         if idx['attributes']['Country'] == 'Guinea':
             x_coord = idx['geometry']['x']
             y_coord = idx['geometry']['y']
             break
      
      url_tests = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/Dashboard_1day_Sht1/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C+Tests&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_tests = requests.get(url_tests)
      cont_tests = json.loads(r_tests.content)
      
      for idx in cont_tests['features']:
          if idx['geometry']['x'] == x_coord and idx['geometry']['y'] == y_coord:
              self.vars["tests_cumulative"] = idx['attributes']['Tests']
              break

  def test_guineaBissau(self):
    self.driver.get("https://africacdc.maps.arcgis.com/apps/opsdashboard/index.html#/9d8d4add4dcb456997fd83607b5d0c7c")
    continent = WebDriverWait(self.driver, 40).until(expected_conditions.presence_of_element_located((By.ID, "Dashboard_1day_Sht1_5411_layer")))
    all_countries = self.driver.find_elements_by_tag_name('circle')
    final_tests = ""
    for country in all_countries:
        try:
            country.click()
            temp_name = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(1) > td:nth-child(2)").text
            if temp_name == "Guinea Bissau":
                final_tests = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(8) .esriNumericValue").text
                break
            else:
                self.driver.find_element_by_id('esri.Map_0_gc').click()
        except:
            pass

    self.vars["tests_cumulative"] = final_tests
    self.driver.close()
    self.driver.quit()
    # When dahsboard doesn't have country names, the json from the arcgis API is used
    if self.vars["tests_cumulative"]=="":
      url_coord = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/NEW_Dashboard/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_coord = requests.get(url_coord)
      cont_coord = json.loads(r_coord.content)
      
      for idx in cont_coord['features']:
         if idx['attributes']['Country'] == 'Guinea Bissau':
             x_coord = idx['geometry']['x']
             y_coord = idx['geometry']['y']
             break
      
      url_tests = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/Dashboard_1day_Sht1/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C+Tests&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_tests = requests.get(url_tests)
      cont_tests = json.loads(r_tests.content)
      
      for idx in cont_tests['features']:
          if idx['geometry']['x'] == x_coord and idx['geometry']['y'] == y_coord:
              self.vars["tests_cumulative"] = idx['attributes']['Tests']
              break

  def test_kenya(self):
    self.driver.get("https://africacdc.maps.arcgis.com/apps/opsdashboard/index.html#/9d8d4add4dcb456997fd83607b5d0c7c")
    continent = WebDriverWait(self.driver, 40).until(expected_conditions.presence_of_element_located((By.ID, "Dashboard_1day_Sht1_5411_layer")))
    all_countries = self.driver.find_elements_by_tag_name('circle')
    final_tests = ""
    for country in all_countries:
        try:
            country.click()
            temp_name = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(1) > td:nth-child(2)").text
            if temp_name == "Kenya":
                final_tests = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(8) .esriNumericValue").text
                break
            else:
                self.driver.find_element_by_id('esri.Map_0_gc').click()
        except:
            pass

    self.vars["tests_cumulative"] = final_tests
    self.driver.close()
    self.driver.quit()
    # When dahsboard doesn't have country names, the json from the arcgis API is used
    if self.vars["tests_cumulative"]=="":
      url_coord = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/NEW_Dashboard/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_coord = requests.get(url_coord)
      cont_coord = json.loads(r_coord.content)
      
      for idx in cont_coord['features']:
         if idx['attributes']['Country'] == 'Kenya':
             x_coord = idx['geometry']['x']
             y_coord = idx['geometry']['y']
             break
      
      url_tests = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/Dashboard_1day_Sht1/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C+Tests&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_tests = requests.get(url_tests)
      cont_tests = json.loads(r_tests.content)
      
      for idx in cont_tests['features']:
          if idx['geometry']['x'] == x_coord and idx['geometry']['y'] == y_coord:
              self.vars["tests_cumulative"] = idx['attributes']['Tests']
              break

  def test_lesotho(self):
    self.driver.get("https://africacdc.maps.arcgis.com/apps/opsdashboard/index.html#/9d8d4add4dcb456997fd83607b5d0c7c")
    continent = WebDriverWait(self.driver, 40).until(expected_conditions.presence_of_element_located((By.ID, "Dashboard_1day_Sht1_5411_layer")))
    all_countries = self.driver.find_elements_by_tag_name('circle')
    action = ActionChains(self.driver)
    action.click_and_hold(on_element = all_countries[12])
    action.move_by_offset(0, 300)
    action.perform()
    action.release(on_element = all_countries[12]) 
    action.perform()
    continent = WebDriverWait(self.driver, 40).until(expected_conditions.presence_of_element_located((By.ID, "Dashboard_1day_Sht1_5411_layer")))
    all_countries = self.driver.find_elements_by_tag_name('circle')
    final_tests = ""
    for country in all_countries:
        try:
            country.click()
            temp_name = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(1) > td:nth-child(2)").text
            if temp_name == "Lesotho":
                final_tests = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(8) .esriNumericValue").text
                break
            else:
                self.driver.find_element_by_id('esri.Map_0_gc').click()
        except:
            pass

    self.vars["tests_cumulative"] = final_tests
    self.driver.close()
    self.driver.quit()
    # When dahsboard doesn't have country names, the json from the arcgis API is used
    if self.vars["tests_cumulative"]=="":
      url_coord = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/NEW_Dashboard/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_coord = requests.get(url_coord)
      cont_coord = json.loads(r_coord.content)
      
      for idx in cont_coord['features']:
         if idx['attributes']['Country'] == 'Lesotho':
             x_coord = idx['geometry']['x']
             y_coord = idx['geometry']['y']
             break
      
      url_tests = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/Dashboard_1day_Sht1/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C+Tests&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_tests = requests.get(url_tests)
      cont_tests = json.loads(r_tests.content)
      
      for idx in cont_tests['features']:
          if idx['geometry']['x'] == 3142962.0200298727 and idx['geometry']['y'] == y_coord:
              self.vars["tests_cumulative"] = idx['attributes']['Tests']
              break

  def test_liberia(self):
    self.driver.get("https://africacdc.maps.arcgis.com/apps/opsdashboard/index.html#/9d8d4add4dcb456997fd83607b5d0c7c")
    continent = WebDriverWait(self.driver, 40).until(expected_conditions.presence_of_element_located((By.ID, "Dashboard_1day_Sht1_5411_layer")))
    all_countries = self.driver.find_elements_by_tag_name('circle')
    final_tests = ""
    for country in all_countries:
        try:
            country.click()
            temp_name = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(1) > td:nth-child(2)").text
            if temp_name == "Liberia":
                final_tests = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(8) .esriNumericValue").text
                break
            else:
                self.driver.find_element_by_id('esri.Map_0_gc').click()
        except:
            pass

    self.vars["tests_cumulative"] = final_tests
    self.driver.close()
    self.driver.quit()
    # When dahsboard doesn't have country names, the json from the arcgis API is used
    if self.vars["tests_cumulative"]=="":
      url_coord = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/NEW_Dashboard/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_coord = requests.get(url_coord)
      cont_coord = json.loads(r_coord.content)
      
      for idx in cont_coord['features']:
         if idx['attributes']['Country'] == 'Liberia':
             x_coord = idx['geometry']['x']
             y_coord = idx['geometry']['y']
             break
      
      url_tests = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/Dashboard_1day_Sht1/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C+Tests&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_tests = requests.get(url_tests)
      cont_tests = json.loads(r_tests.content)
      
      for idx in cont_tests['features']:
          if idx['geometry']['x'] == x_coord and idx['geometry']['y'] == y_coord:
              self.vars["tests_cumulative"] = idx['attributes']['Tests']
              break

  def test_libya(self):
    self.driver.get("https://africacdc.maps.arcgis.com/apps/opsdashboard/index.html#/9d8d4add4dcb456997fd83607b5d0c7c")
    continent = WebDriverWait(self.driver, 40).until(expected_conditions.presence_of_element_located((By.ID, "Dashboard_1day_Sht1_5411_layer")))
    all_countries = self.driver.find_elements_by_tag_name('circle')
    final_tests = ""
    for country in all_countries:
        try:
            country.click()
            temp_name = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(1) > td:nth-child(2)").text
            if temp_name == "Libya":
                final_tests = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(8) .esriNumericValue").text
                break
            else:
                self.driver.find_element_by_id('esri.Map_0_gc').click()
        except:
            pass

    self.vars["tests_cumulative"] = final_tests
    self.driver.close()
    self.driver.quit()
    # When dahsboard doesn't have country names, the json from the arcgis API is used
    if self.vars["tests_cumulative"]=="":
      url_coord = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/NEW_Dashboard/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_coord = requests.get(url_coord)
      cont_coord = json.loads(r_coord.content)
      
      for idx in cont_coord['features']:
         if idx['attributes']['Country'] == 'Libya':
             x_coord = idx['geometry']['x']
             y_coord = idx['geometry']['y']
             break
      
      url_tests = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/Dashboard_1day_Sht1/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C+Tests&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_tests = requests.get(url_tests)
      cont_tests = json.loads(r_tests.content)
      
      for idx in cont_tests['features']:
          if idx['geometry']['x'] == x_coord and idx['geometry']['y'] == y_coord:
              self.vars["tests_cumulative"] = idx['attributes']['Tests']
              break

  def test_madagascar(self):
    self.driver.get("https://africacdc.maps.arcgis.com/apps/opsdashboard/index.html#/9d8d4add4dcb456997fd83607b5d0c7c")
    continent = WebDriverWait(self.driver, 40).until(expected_conditions.presence_of_element_located((By.ID, "Dashboard_1day_Sht1_5411_layer")))
    all_countries = self.driver.find_elements_by_tag_name('circle')
    final_tests = ""
    for country in all_countries:
        try:
            country.click()
            temp_name = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(1) > td:nth-child(2)").text
            if temp_name == "Madagascar":
                final_tests = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(8) .esriNumericValue").text
                break
            else:
                self.driver.find_element_by_id('esri.Map_0_gc').click()
        except:
            pass

    self.vars["tests_cumulative"] = final_tests
    self.driver.close()
    self.driver.quit()
    # When dahsboard doesn't have country names, the json from the arcgis API is used
    if self.vars["tests_cumulative"]=="":
      url_coord = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/NEW_Dashboard/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_coord = requests.get(url_coord)
      cont_coord = json.loads(r_coord.content)
      
      for idx in cont_coord['features']:
         if idx['attributes']['Country'] == 'Madagascar':
             x_coord = idx['geometry']['x']
             y_coord = idx['geometry']['y']
             break
      
      url_tests = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/Dashboard_1day_Sht1/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C+Tests&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_tests = requests.get(url_tests)
      cont_tests = json.loads(r_tests.content)
      
      for idx in cont_tests['features']:
          if idx['geometry']['x'] == x_coord and idx['geometry']['y'] == y_coord:
              self.vars["tests_cumulative"] = idx['attributes']['Tests']
              break

  def test_malawi(self):
    self.driver.get("https://africacdc.maps.arcgis.com/apps/opsdashboard/index.html#/9d8d4add4dcb456997fd83607b5d0c7c")
    continent = WebDriverWait(self.driver, 40).until(expected_conditions.presence_of_element_located((By.ID, "Dashboard_1day_Sht1_5411_layer")))
    all_countries = self.driver.find_elements_by_tag_name('circle')
    final_tests = ""
    for country in all_countries:
        try:
            country.click()
            temp_name = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(1) > td:nth-child(2)").text
            if temp_name == "Malawi":
                final_tests = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(8) .esriNumericValue").text
                break
            else:
                self.driver.find_element_by_id('esri.Map_0_gc').click()
        except:
            pass

    self.vars["tests_cumulative"] = final_tests
    self.driver.close()
    self.driver.quit()
    # When dahsboard doesn't have country names, the json from the arcgis API is used
    if self.vars["tests_cumulative"]=="":
      url_coord = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/NEW_Dashboard/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_coord = requests.get(url_coord)
      cont_coord = json.loads(r_coord.content)
      
      for idx in cont_coord['features']:
         if idx['attributes']['Country'] == 'Malawi':
             x_coord = idx['geometry']['x']
             y_coord = idx['geometry']['y']
             break
      
      url_tests = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/Dashboard_1day_Sht1/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C+Tests&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_tests = requests.get(url_tests)
      cont_tests = json.loads(r_tests.content)
      
      for idx in cont_tests['features']:
          if idx['geometry']['x'] == 3818539.9276181106 and idx['geometry']['y'] == y_coord:
              self.vars["tests_cumulative"] = idx['attributes']['Tests']
              break

  def test_mali(self):
    self.driver.get("https://africacdc.maps.arcgis.com/apps/opsdashboard/index.html#/9d8d4add4dcb456997fd83607b5d0c7c")
    continent = WebDriverWait(self.driver, 40).until(expected_conditions.presence_of_element_located((By.ID, "Dashboard_1day_Sht1_5411_layer")))
    all_countries = self.driver.find_elements_by_tag_name('circle')
    final_tests = ""
    for country in all_countries:
        try:
            country.click()
            temp_name = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(1) > td:nth-child(2)").text
            if temp_name == "Mali":
                final_tests = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(8) .esriNumericValue").text
                break
            else:
                self.driver.find_element_by_id('esri.Map_0_gc').click()
        except:
            pass

    self.vars["tests_cumulative"] = final_tests
    self.driver.close()
    self.driver.quit()
    # When dahsboard doesn't have country names, the json from the arcgis API is used
    if self.vars["tests_cumulative"]=="":
      url_coord = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/NEW_Dashboard/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_coord = requests.get(url_coord)
      cont_coord = json.loads(r_coord.content)
      
      for idx in cont_coord['features']:
         if idx['attributes']['Country'] == 'Mali':
             x_coord = idx['geometry']['x']
             y_coord = idx['geometry']['y']
             break
      
      url_tests = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/Dashboard_1day_Sht1/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C+Tests&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_tests = requests.get(url_tests)
      cont_tests = json.loads(r_tests.content)
      
      for idx in cont_tests['features']:
          if idx['geometry']['x'] == x_coord and idx['geometry']['y'] == y_coord:
              self.vars["tests_cumulative"] = idx['attributes']['Tests']
              break

  def test_mauritania(self):
    self.driver.get("https://africacdc.maps.arcgis.com/apps/opsdashboard/index.html#/9d8d4add4dcb456997fd83607b5d0c7c")
    continent = WebDriverWait(self.driver, 40).until(expected_conditions.presence_of_element_located((By.ID, "Dashboard_1day_Sht1_5411_layer")))
    all_countries = self.driver.find_elements_by_tag_name('circle')
    final_tests = ""
    for country in all_countries:
        try:
            country.click()
            temp_name = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(1) > td:nth-child(2)").text
            if temp_name == "Mauritania":
                final_tests = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(8) .esriNumericValue").text
                break
            else:
                self.driver.find_element_by_id('esri.Map_0_gc').click()
        except:
            pass

    self.vars["tests_cumulative"] = final_tests
    self.driver.close()
    self.driver.quit()
    # When dahsboard doesn't have country names, the json from the arcgis API is used
    if self.vars["tests_cumulative"]=="":
      url_coord = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/NEW_Dashboard/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_coord = requests.get(url_coord)
      cont_coord = json.loads(r_coord.content)
      
      for idx in cont_coord['features']:
         if idx['attributes']['Country'] == 'Mauritania':
             x_coord = idx['geometry']['x']
             y_coord = idx['geometry']['y']
             break
      
      url_tests = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/Dashboard_1day_Sht1/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C+Tests&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_tests = requests.get(url_tests)
      cont_tests = json.loads(r_tests.content)
      
      for idx in cont_tests['features']:
          if idx['geometry']['x'] == x_coord and idx['geometry']['y'] == y_coord:
              self.vars["tests_cumulative"] = idx['attributes']['Tests']
              break

  def test_mauritius(self):
    self.driver.get("https://africacdc.maps.arcgis.com/apps/opsdashboard/index.html#/9d8d4add4dcb456997fd83607b5d0c7c")
    continent = WebDriverWait(self.driver, 40).until(expected_conditions.presence_of_element_located((By.ID, "Dashboard_1day_Sht1_5411_layer")))
    all_countries = self.driver.find_elements_by_tag_name('circle')
    final_tests = ""
    for country in all_countries:
        try:
            country.click()
            temp_name = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(1) > td:nth-child(2)").text
            if temp_name == "Mauritius":
                final_tests = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(8) .esriNumericValue").text
                break
            else:
                self.driver.find_element_by_id('esri.Map_0_gc').click()
        except:
            pass

    self.vars["tests_cumulative"] = final_tests
    self.driver.close()
    self.driver.quit()
    # When dahsboard doesn't have country names, the json from the arcgis API is used
    if self.vars["tests_cumulative"]=="":
      url_coord = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/NEW_Dashboard/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_coord = requests.get(url_coord)
      cont_coord = json.loads(r_coord.content)
      
      for idx in cont_coord['features']:
         if idx['attributes']['Country'] == 'Mauritius':
             x_coord = idx['geometry']['x']
             y_coord = idx['geometry']['y']
             break
      
      url_tests = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/Dashboard_1day_Sht1/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C+Tests&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_tests = requests.get(url_tests)
      cont_tests = json.loads(r_tests.content)
      
      for idx in cont_tests['features']:
          if idx['geometry']['x'] == x_coord and idx['geometry']['y'] == y_coord:
              self.vars["tests_cumulative"] = idx['attributes']['Tests']
              break
              
  def test_morocco(self):
    self.driver.get("https://africacdc.maps.arcgis.com/apps/opsdashboard/index.html#/9d8d4add4dcb456997fd83607b5d0c7c")
    continent = WebDriverWait(self.driver, 40).until(expected_conditions.presence_of_element_located((By.ID, "Dashboard_1day_Sht1_5411_layer")))
    all_countries = self.driver.find_elements_by_tag_name('circle')
    action = ActionChains(self.driver)
    action.click_and_hold(on_element = all_countries[12])
    action.move_by_offset(0, -300)
    action.perform()
    action.release(on_element = all_countries[1]) 
    action.perform()
    continent = WebDriverWait(self.driver, 40).until(expected_conditions.presence_of_element_located((By.ID, "Dashboard_1day_Sht1_5411_layer")))
    all_countries = self.driver.find_elements_by_tag_name('circle')
    final_tests = ""
    for country in all_countries:
        try:
            country.click()
            temp_name = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(1) > td:nth-child(2)").text
            if temp_name == "Morocco":
                final_tests = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(8) .esriNumericValue").text
                break
            else:
                self.driver.find_element_by_id('esri.Map_0_gc').click()
        except:
            pass

    self.vars["tests_cumulative"] = final_tests
    self.driver.close()
    self.driver.quit()
    # When dahsboard doesn't have country names, the json from the arcgis API is used
    if self.vars["tests_cumulative"]=="":
      url_coord = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/NEW_Dashboard/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_coord = requests.get(url_coord)
      cont_coord = json.loads(r_coord.content)
      
      for idx in cont_coord['features']:
         if idx['attributes']['Country'] == 'Morocco':
             x_coord = idx['geometry']['x']
             y_coord = idx['geometry']['y']
             break
      
      url_tests = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/Dashboard_1day_Sht1/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C+Tests&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_tests = requests.get(url_tests)
      cont_tests = json.loads(r_tests.content)
      
      for idx in cont_tests['features']:
          if idx['geometry']['x'] == x_coord and idx['geometry']['y'] == y_coord:
              self.vars["tests_cumulative"] = idx['attributes']['Tests']
              break

  def test_mozambique(self):
    self.driver.set_page_load_timeout(30)
    self.driver.get("https://africacdc.maps.arcgis.com/apps/opsdashboard/index.html#/9d8d4add4dcb456997fd83607b5d0c7c")
    continent = WebDriverWait(self.driver, 40).until(expected_conditions.presence_of_element_located((By.ID, "Dashboard_1day_Sht1_5411_layer")))
    all_countries = self.driver.find_elements_by_tag_name('circle')
    final_tests = ""
    for country in all_countries:
        try:
            country.click()
            temp_name = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(1) > td:nth-child(2)").text
            if temp_name == "Mozambique":
                final_tests = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(8) .esriNumericValue").text
                break
            else:
                self.driver.find_element_by_id('esri.Map_0_gc').click()
        except:
            pass

    self.vars["tests_cumulative"] = final_tests
    self.driver.close()
    self.driver.quit()
    # When dahsboard doesn't have country names, the json from the arcgis API is used
    if self.vars["tests_cumulative"]=="":
      url_coord = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/NEW_Dashboard/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_coord = requests.get(url_coord)
      cont_coord = json.loads(r_coord.content)
      
      for idx in cont_coord['features']:
         if idx['attributes']['Country'] == 'Mozambique':
             x_coord = idx['geometry']['x']
             y_coord = idx['geometry']['y']
             break
      
      url_tests = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/Dashboard_1day_Sht1/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C+Tests&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_tests = requests.get(url_tests)
      cont_tests = json.loads(r_tests.content)
      
      for idx in cont_tests['features']:
          if idx['geometry']['x'] == x_coord and idx['geometry']['y'] == y_coord:
              self.vars["tests_cumulative"] = idx['attributes']['Tests']
              break

  def test_namibia(self):
    self.driver.get("https://africacdc.maps.arcgis.com/apps/opsdashboard/index.html#/9d8d4add4dcb456997fd83607b5d0c7c")
    continent = WebDriverWait(self.driver, 40).until(expected_conditions.presence_of_element_located((By.ID, "Dashboard_1day_Sht1_5411_layer")))
    all_countries = self.driver.find_elements_by_tag_name('circle')
    final_tests = ""
    for country in all_countries:
        try:
            country.click()
            temp_name = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(1) > td:nth-child(2)").text
            if temp_name == "Namibia":
                final_tests = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(8) .esriNumericValue").text
                break
            else:
                self.driver.find_element_by_id('esri.Map_0_gc').click()
        except:
            pass

    self.vars["tests_cumulative"] = final_tests
    self.driver.close()
    self.driver.quit()
    # When dahsboard doesn't have country names, the json from the arcgis API is used
    if self.vars["tests_cumulative"]=="":
      url_coord = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/NEW_Dashboard/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_coord = requests.get(url_coord)
      cont_coord = json.loads(r_coord.content)
      
      for idx in cont_coord['features']:
         if idx['attributes']['Country'] == 'Namibia':
             x_coord = idx['geometry']['x']
             y_coord = idx['geometry']['y']
             break
      
      url_tests = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/Dashboard_1day_Sht1/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C+Tests&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_tests = requests.get(url_tests)
      cont_tests = json.loads(r_tests.content)
      
      for idx in cont_tests['features']:
          if idx['geometry']['x'] == x_coord and idx['geometry']['y'] == -2542072.466186072:
              self.vars["tests_cumulative"] = idx['attributes']['Tests']
              break

  def test_niger(self):
    self.driver.get("https://africacdc.maps.arcgis.com/apps/opsdashboard/index.html#/9d8d4add4dcb456997fd83607b5d0c7c")
    continent = WebDriverWait(self.driver, 40).until(expected_conditions.presence_of_element_located((By.ID, "Dashboard_1day_Sht1_5411_layer")))
    all_countries = self.driver.find_elements_by_tag_name('circle')
    final_tests = ""
    for country in all_countries:
        try:
            country.click()
            temp_name = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(1) > td:nth-child(2)").text
            if temp_name == "Niger":
                final_tests = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(8) .esriNumericValue").text
                break
            else:
                self.driver.find_element_by_id('esri.Map_0_gc').click()
        except:
            pass

    self.vars["tests_cumulative"] = final_tests
    self.driver.close()
    self.driver.quit()
    # When dahsboard doesn't have country names, the json from the arcgis API is used
    if self.vars["tests_cumulative"]=="":
      url_coord = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/NEW_Dashboard/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_coord = requests.get(url_coord)
      cont_coord = json.loads(r_coord.content)
      
      for idx in cont_coord['features']:
         if idx['attributes']['Country'] == 'Niger':
             x_coord = idx['geometry']['x']
             y_coord = idx['geometry']['y']
             break
      
      url_tests = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/Dashboard_1day_Sht1/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C+Tests&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_tests = requests.get(url_tests)
      cont_tests = json.loads(r_tests.content)
      
      for idx in cont_tests['features']:
          if idx['geometry']['x'] == x_coord and idx['geometry']['y'] == y_coord:
              self.vars["tests_cumulative"] = idx['attributes']['Tests']
              break

  def test_nigeria(self):
    self.driver.get("https://africacdc.maps.arcgis.com/apps/opsdashboard/index.html#/9d8d4add4dcb456997fd83607b5d0c7c")
    continent = WebDriverWait(self.driver, 40).until(expected_conditions.presence_of_element_located((By.ID, "Dashboard_1day_Sht1_5411_layer")))
    all_countries = self.driver.find_elements_by_tag_name('circle')
    final_tests = ""
    for country in all_countries:
        try:
            country.click()
            temp_name = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(1) > td:nth-child(2)").text
            if temp_name == "Nigeria":
                final_tests = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(8) .esriNumericValue").text
                break
            else:
                self.driver.find_element_by_id('esri.Map_0_gc').click()
        except:
            pass

    self.vars["tests_cumulative"] = final_tests
    self.driver.close()
    self.driver.quit()
    # When dahsboard doesn't have country names, the json from the arcgis API is used
    if self.vars["tests_cumulative"]=="":
      url_coord = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/NEW_Dashboard/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_coord = requests.get(url_coord)
      cont_coord = json.loads(r_coord.content)
      
      for idx in cont_coord['features']:
         if idx['attributes']['Country'] == 'Nigeria':
             x_coord = idx['geometry']['x']
             y_coord = idx['geometry']['y']
             break
      
      url_tests = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/Dashboard_1day_Sht1/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C+Tests&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_tests = requests.get(url_tests)
      cont_tests = json.loads(r_tests.content)
      
      for idx in cont_tests['features']:
          if idx['geometry']['x'] == x_coord and idx['geometry']['y'] == y_coord:
              self.vars["tests_cumulative"] = idx['attributes']['Tests']
              break

  def test_congo(self):
    self.driver.get("https://africacdc.maps.arcgis.com/apps/opsdashboard/index.html#/9d8d4add4dcb456997fd83607b5d0c7c")
    continent = WebDriverWait(self.driver, 40).until(expected_conditions.presence_of_element_located((By.ID, "Dashboard_1day_Sht1_5411_layer")))
    all_countries = self.driver.find_elements_by_tag_name('circle')
    final_tests = ""
    for country in all_countries:
        try:
            country.click()
            temp_name = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(1) > td:nth-child(2)").text
            if temp_name == "Republic of the Congo":
                final_tests = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(8) .esriNumericValue").text
                break
            else:
                self.driver.find_element_by_id('esri.Map_0_gc').click()
        except:
            pass

    self.vars["tests_cumulative"] = final_tests
    self.driver.close()
    self.driver.quit()
    # When dahsboard doesn't have country names, the json from the arcgis API is used
    if self.vars["tests_cumulative"]=="":
      url_coord = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/NEW_Dashboard/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_coord = requests.get(url_coord)
      cont_coord = json.loads(r_coord.content)
      
      for idx in cont_coord['features']:
         if idx['attributes']['Country'] == 'Repulic of the Congo':
             x_coord = idx['geometry']['x']
             y_coord = idx['geometry']['y']
             break
      
      url_tests = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/Dashboard_1day_Sht1/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C+Tests&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_tests = requests.get(url_tests)
      cont_tests = json.loads(r_tests.content)
      
      for idx in cont_tests['features']:
          if idx['geometry']['x'] == x_coord and idx['geometry']['y'] == y_coord:
              self.vars["tests_cumulative"] = idx['attributes']['Tests']
              break

  def test_rwanda(self):
    self.driver.get("https://africacdc.maps.arcgis.com/apps/opsdashboard/index.html#/9d8d4add4dcb456997fd83607b5d0c7c")
    continent = WebDriverWait(self.driver, 40).until(expected_conditions.presence_of_element_located((By.ID, "Dashboard_1day_Sht1_5411_layer")))
    all_countries = self.driver.find_elements_by_tag_name('circle')
    final_tests = ""
    for country in all_countries:
        try:
            country.click()
            temp_name = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(1) > td:nth-child(2)").text
            if temp_name == "Rwanda":
                final_tests = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(8) .esriNumericValue").text
                break
            else:
                self.driver.find_element_by_id('esri.Map_0_gc').click()
        except:
            pass

    self.vars["tests_cumulative"] = final_tests
    self.driver.close()
    self.driver.quit()
    # When dahsboard doesn't have country names, the json from the arcgis API is used
    if self.vars["tests_cumulative"]=="":
      url_coord = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/NEW_Dashboard/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_coord = requests.get(url_coord)
      cont_coord = json.loads(r_coord.content)
      
      for idx in cont_coord['features']:
         if idx['attributes']['Country'] == 'Rwanda':
             x_coord = idx['geometry']['x']
             y_coord = idx['geometry']['y']
             break
      
      url_tests = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/Dashboard_1day_Sht1/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C+Tests&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_tests = requests.get(url_tests)
      cont_tests = json.loads(r_tests.content)
      
      for idx in cont_tests['features']:
          if idx['geometry']['x'] == x_coord and idx['geometry']['y'] == y_coord:
              self.vars["tests_cumulative"] = idx['attributes']['Tests']
              break

  def test_saoTomeandPrincipe(self):
    self.driver.get("https://africacdc.maps.arcgis.com/apps/opsdashboard/index.html#/9d8d4add4dcb456997fd83607b5d0c7c")
    continent = WebDriverWait(self.driver, 40).until(expected_conditions.presence_of_element_located((By.ID, "Dashboard_1day_Sht1_5411_layer")))
    all_countries = self.driver.find_elements_by_tag_name('circle')
    final_tests = ""
    for country in all_countries:
        try:
            country.click()
            temp_name = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(1) > td:nth-child(2)").text
            if temp_name == "Sao Tome and Principe":
                final_tests = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(8) .esriNumericValue").text
                break
            else:
                self.driver.find_element_by_id('esri.Map_0_gc').click()
        except:
            pass

    self.vars["tests_cumulative"] = final_tests
    self.driver.close()
    self.driver.quit()
    # When dahsboard doesn't have country names, the json from the arcgis API is used
    if self.vars["tests_cumulative"]=="":
      url_coord = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/NEW_Dashboard/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_coord = requests.get(url_coord)
      cont_coord = json.loads(r_coord.content)
      
      for idx in cont_coord['features']:
         if idx['attributes']['Country'] == 'Sao Tome and Principe':
             x_coord = idx['geometry']['x']
             y_coord = idx['geometry']['y']
             break
      
      url_tests = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/Dashboard_1day_Sht1/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C+Tests&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_tests = requests.get(url_tests)
      cont_tests = json.loads(r_tests.content)
      
      for idx in cont_tests['features']:
          if idx['geometry']['x'] == x_coord and idx['geometry']['y'] == y_coord:
              self.vars["tests_cumulative"] = idx['attributes']['Tests']
              break

  def test_senegal(self):
    self.driver.get("https://africacdc.maps.arcgis.com/apps/opsdashboard/index.html#/9d8d4add4dcb456997fd83607b5d0c7c")
    continent = WebDriverWait(self.driver, 40).until(expected_conditions.presence_of_element_located((By.ID, "Dashboard_1day_Sht1_5411_layer")))
    all_countries = self.driver.find_elements_by_tag_name('circle')
    final_tests = ""
    for country in all_countries:
        try:
            country.click()
            temp_name = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(1) > td:nth-child(2)").text
            if temp_name == "Senegal":
                final_tests = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(8) .esriNumericValue").text
                break
            else:
                self.driver.find_element_by_id('esri.Map_0_gc').click()
        except:
            pass

    self.vars["tests_cumulative"] = final_tests
    self.driver.close()
    self.driver.quit()
    # When dahsboard doesn't have country names, the json from the arcgis API is used
    if self.vars["tests_cumulative"]=="":
      url_coord = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/NEW_Dashboard/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_coord = requests.get(url_coord)
      cont_coord = json.loads(r_coord.content)
      
      for idx in cont_coord['features']:
         if idx['attributes']['Country'] == 'Senegal':
             x_coord = idx['geometry']['x']
             y_coord = idx['geometry']['y']
             break
      
      url_tests = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/Dashboard_1day_Sht1/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C+Tests&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_tests = requests.get(url_tests)
      cont_tests = json.loads(r_tests.content)
      
      for idx in cont_tests['features']:
          if idx['geometry']['x'] == x_coord and idx['geometry']['y'] == y_coord:
              self.vars["tests_cumulative"] = idx['attributes']['Tests']
              break

  def test_seychelles(self):
    self.driver.get("https://africacdc.maps.arcgis.com/apps/opsdashboard/index.html#/9d8d4add4dcb456997fd83607b5d0c7c")
    continent = WebDriverWait(self.driver, 40).until(expected_conditions.presence_of_element_located((By.ID, "Dashboard_1day_Sht1_5411_layer")))
    all_countries = self.driver.find_elements_by_tag_name('circle')
    final_tests = ""
    for country in all_countries:
        try:
            country.click()
            temp_name = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(1) > td:nth-child(2)").text
            if temp_name == "Seychelles":
                final_tests = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(8) .esriNumericValue").text
                break
            else:
                self.driver.find_element_by_id('esri.Map_0_gc').click()
        except:
            pass

    self.vars["tests_cumulative"] = final_tests
    self.driver.close()
    self.driver.quit()
    # When dahsboard doesn't have country names, the json from the arcgis API is used
    if self.vars["tests_cumulative"]=="":
      url_coord = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/NEW_Dashboard/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_coord = requests.get(url_coord)
      cont_coord = json.loads(r_coord.content)
      
      for idx in cont_coord['features']:
         if idx['attributes']['Country'] == 'Seychelles':
             x_coord = idx['geometry']['x']
             y_coord = idx['geometry']['y']
             break
      
      url_tests = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/Dashboard_1day_Sht1/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C+Tests&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_tests = requests.get(url_tests)
      cont_tests = json.loads(r_tests.content)
      
      for idx in cont_tests['features']:
          if idx['geometry']['x'] == 6115561.0920998855 and idx['geometry']['y'] == y_coord:
              self.vars["tests_cumulative"] = idx['attributes']['Tests']
              break
              
      print(self.vars)

  def test_sierraLeone(self):
    self.driver.get("https://africacdc.maps.arcgis.com/apps/opsdashboard/index.html#/9d8d4add4dcb456997fd83607b5d0c7c")
    continent = WebDriverWait(self.driver, 40).until(expected_conditions.presence_of_element_located((By.ID, "Dashboard_1day_Sht1_5411_layer")))
    all_countries = self.driver.find_elements_by_tag_name('circle')
    final_tests = ""
    for country in all_countries:
        try:
            country.click()
            temp_name = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(1) > td:nth-child(2)").text
            if temp_name == "Sierra Leone":
                final_tests = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(8) .esriNumericValue").text
                break
            else:
                self.driver.find_element_by_id('esri.Map_0_gc').click()
        except:
            pass

    self.vars["tests_cumulative"] = final_tests
    self.driver.close()
    self.driver.quit()
    # When dahsboard doesn't have country names, the json from the arcgis API is used
    if self.vars["tests_cumulative"]=="":
      url_coord = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/NEW_Dashboard/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_coord = requests.get(url_coord)
      cont_coord = json.loads(r_coord.content)
      
      for idx in cont_coord['features']:
         if idx['attributes']['Country'] == 'Sierra Leone':
             x_coord = idx['geometry']['x']
             y_coord = idx['geometry']['y']
             break
      
      url_tests = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/Dashboard_1day_Sht1/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C+Tests&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_tests = requests.get(url_tests)
      cont_tests = json.loads(r_tests.content)
      
      for idx in cont_tests['features']:
          if idx['geometry']['x'] == x_coord and idx['geometry']['y'] == y_coord:
              self.vars["tests_cumulative"] = idx['attributes']['Tests']
              break

  def test_somalia(self):
    self.driver.get("https://africacdc.maps.arcgis.com/apps/opsdashboard/index.html#/9d8d4add4dcb456997fd83607b5d0c7c")
    continent = WebDriverWait(self.driver, 40).until(expected_conditions.presence_of_element_located((By.ID, "Dashboard_1day_Sht1_5411_layer")))
    all_countries = self.driver.find_elements_by_tag_name('circle')
    final_tests = ""
    for country in all_countries:
        try:
            country.click()
            temp_name = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(1) > td:nth-child(2)").text
            if temp_name == "Somalia":
                final_tests = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(8) .esriNumericValue").text
                break
            else:
                self.driver.find_element_by_id('esri.Map_0_gc').click()
        except:
            pass

    self.vars["tests_cumulative"] = final_tests
    self.driver.close()
    self.driver.quit()
    # When dahsboard doesn't have country names, the json from the arcgis API is used
    if self.vars["tests_cumulative"]=="":
      url_coord = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/NEW_Dashboard/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_coord = requests.get(url_coord)
      cont_coord = json.loads(r_coord.content)
      
      for idx in cont_coord['features']:
         if idx['attributes']['Country'] == 'Somalia':
             x_coord = idx['geometry']['x']
             y_coord = idx['geometry']['y']
             break
      
      url_tests = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/Dashboard_1day_Sht1/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C+Tests&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_tests = requests.get(url_tests)
      cont_tests = json.loads(r_tests.content)
      
      for idx in cont_tests['features']:
          if idx['geometry']['x'] == x_coord and idx['geometry']['y'] == y_coord:
              self.vars["tests_cumulative"] = idx['attributes']['Tests']
              break

  def test_southAfrica(self):
    self.driver.get("https://africacdc.maps.arcgis.com/apps/opsdashboard/index.html#/9d8d4add4dcb456997fd83607b5d0c7c")
    continent = WebDriverWait(self.driver, 40).until(expected_conditions.presence_of_element_located((By.ID, "Dashboard_1day_Sht1_5411_layer")))
    all_countries = self.driver.find_elements_by_tag_name('circle')
    action = ActionChains(self.driver)
    action.click_and_hold(on_element = all_countries[12])
    action.move_by_offset(0, 300)
    action.perform()
    action.release(on_element = all_countries[12]) 
    action.perform()
    continent = WebDriverWait(self.driver, 40).until(expected_conditions.presence_of_element_located((By.ID, "Dashboard_1day_Sht1_5411_layer")))
    all_countries = self.driver.find_elements_by_tag_name('circle')
    final_tests = ""
    for country in all_countries:
        try:
            country.click()
            temp_name = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(1) > td:nth-child(2)").text
            if temp_name == 'South Africa':
                final_tests = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(8) .esriNumericValue").text
                break
            else:
                self.driver.find_element_by_id('esri.Map_0_gc').click()
        except:
            pass

    self.vars["tests_cumulative"] = final_tests
    self.driver.close()
    self.driver.quit()
    # When dahsboard doesn't have country names, the json from the arcgis API is used
    if self.vars["tests_cumulative"]=="":
      url_coord = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/NEW_Dashboard/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_coord = requests.get(url_coord)
      cont_coord = json.loads(r_coord.content)
      
      for idx in cont_coord['features']:
         if idx['attributes']['Country'] == 'South Africa':
             x_coord = idx['geometry']['x']
             y_coord = idx['geometry']['y']
             break
      
      url_tests = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/Dashboard_1day_Sht1/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C+Tests&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_tests = requests.get(url_tests)
      cont_tests = json.loads(r_tests.content)
      
      for idx in cont_tests['features']:
          if idx['geometry']['x'] == x_coord and idx['geometry']['y'] == y_coord:
              self.vars["tests_cumulative"] = idx['attributes']['Tests']
              break

  def test_southSudan(self):
    self.driver.get("https://africacdc.maps.arcgis.com/apps/opsdashboard/index.html#/9d8d4add4dcb456997fd83607b5d0c7c")
    continent = WebDriverWait(self.driver, 40).until(expected_conditions.presence_of_element_located((By.ID, "Dashboard_1day_Sht1_5411_layer")))
    all_countries = self.driver.find_elements_by_tag_name('circle')
    final_tests = ""
    for country in all_countries:
        try:
            country.click()
            temp_name = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(1) > td:nth-child(2)").text
            if temp_name == "South Sudan":
                final_tests = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(8) .esriNumericValue").text
                break
            else:
                self.driver.find_element_by_id('esri.Map_0_gc').click()
        except:
            pass

    self.vars["tests_cumulative"] = final_tests
    self.driver.close()
    self.driver.quit()
    # When dahsboard doesn't have country names, the json from the arcgis API is used
    if self.vars["tests_cumulative"]=="":
      url_coord = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/NEW_Dashboard/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_coord = requests.get(url_coord)
      cont_coord = json.loads(r_coord.content)
      
      for idx in cont_coord['features']:
         if idx['attributes']['Country'] == 'South Sudan':
             x_coord = idx['geometry']['x']
             y_coord = idx['geometry']['y']
             break
      
      url_tests = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/Dashboard_1day_Sht1/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C+Tests&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_tests = requests.get(url_tests)
      cont_tests = json.loads(r_tests.content)
      
      for idx in cont_tests['features']:
          if idx['geometry']['x'] == x_coord and idx['geometry']['y'] == y_coord:
              self.vars["tests_cumulative"] = idx['attributes']['Tests']
              break
              
      print(self.vars)
              
  def test_sudan(self):
    self.driver.get("https://africacdc.maps.arcgis.com/apps/opsdashboard/index.html#/9d8d4add4dcb456997fd83607b5d0c7c")
    continent = WebDriverWait(self.driver, 40).until(expected_conditions.presence_of_element_located((By.ID, "Dashboard_1day_Sht1_5411_layer")))
    all_countries = self.driver.find_elements_by_tag_name('circle')
    final_tests = ""
    for country in all_countries:
        try:
            country.click()
            temp_name = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(1) > td:nth-child(2)").text
            if temp_name == "Sudan":
                final_tests = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(8) .esriNumericValue").text
                break
            else:
                self.driver.find_element_by_id('esri.Map_0_gc').click()
        except:
            pass

    self.vars["tests_cumulative"] = final_tests
    self.driver.close()
    self.driver.quit()
    # When dahsboard doesn't have country names, the json from the arcgis API is used
    if self.vars["tests_cumulative"]=="":
      url_coord = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/NEW_Dashboard/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_coord = requests.get(url_coord)
      cont_coord = json.loads(r_coord.content)
      
      for idx in cont_coord['features']:
         if idx['attributes']['Country'] == 'Sudan':
             x_coord = idx['geometry']['x']
             y_coord = idx['geometry']['y']
             break
      
      url_tests = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/Dashboard_1day_Sht1/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C+Tests&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_tests = requests.get(url_tests)
      cont_tests = json.loads(r_tests.content)
      
      for idx in cont_tests['features']:
          if idx['geometry']['x'] == 3363811.8747603903 and idx['geometry']['y'] == y_coord:
              self.vars["tests_cumulative"] = idx['attributes']['Tests']
              break
              
      print(self.vars)

  def test_theGambia(self):
    self.driver.get("https://africacdc.maps.arcgis.com/apps/opsdashboard/index.html#/9d8d4add4dcb456997fd83607b5d0c7c")
    continent = WebDriverWait(self.driver, 40).until(expected_conditions.presence_of_element_located((By.ID, "Dashboard_1day_Sht1_5411_layer")))
    all_countries = self.driver.find_elements_by_tag_name('circle')
    final_tests = ""
    for country in all_countries:
        try:
            country.click()
            temp_name = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(1) > td:nth-child(2)").text
            if temp_name == "Gambia":
                final_tests = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(8) .esriNumericValue").text
                break
            else:
                self.driver.find_element_by_id('esri.Map_0_gc').click()
        except:
            pass

    self.vars["tests_cumulative"] = final_tests
    self.driver.close()
    self.driver.quit()
    # When dahsboard doesn't have country names, the json from the arcgis API is used
    if self.vars["tests_cumulative"]=="":
      url_coord = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/NEW_Dashboard/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_coord = requests.get(url_coord)
      cont_coord = json.loads(r_coord.content)
      
      for idx in cont_coord['features']:
         if idx['attributes']['Country'] == 'Gambia':
             x_coord = idx['geometry']['x']
             y_coord = idx['geometry']['y']
             break
      
      url_tests = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/Dashboard_1day_Sht1/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C+Tests&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_tests = requests.get(url_tests)
      cont_tests = json.loads(r_tests.content)
      
      for idx in cont_tests['features']:
          if idx['geometry']['x'] == x_coord and idx['geometry']['y'] == y_coord:
              self.vars["tests_cumulative"] = idx['attributes']['Tests']
              break

  def test_togo(self):
    self.driver.get("https://africacdc.maps.arcgis.com/apps/opsdashboard/index.html#/9d8d4add4dcb456997fd83607b5d0c7c")
    continent = WebDriverWait(self.driver, 40).until(expected_conditions.presence_of_element_located((By.ID, "Dashboard_1day_Sht1_5411_layer")))
    all_countries = self.driver.find_elements_by_tag_name('circle')
    final_tests = ""
    for country in all_countries:
        try:
            country.click()
            temp_name = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(1) > td:nth-child(2)").text
            if temp_name == "Togo":
                final_tests = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(8) .esriNumericValue").text
                break
            else:
                self.driver.find_element_by_id('esri.Map_0_gc').click()
        except:
            pass

    self.vars["tests_cumulative"] = final_tests
    self.driver.close()
    self.driver.quit()
    # When dahsboard doesn't have country names, the json from the arcgis API is used
    if self.vars["tests_cumulative"]=="":
      url_coord = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/NEW_Dashboard/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_coord = requests.get(url_coord)
      cont_coord = json.loads(r_coord.content)
      
      for idx in cont_coord['features']:
         if idx['attributes']['Country'] == 'Togo':
             x_coord = idx['geometry']['x']
             y_coord = idx['geometry']['y']
             break
      
      url_tests = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/Dashboard_1day_Sht1/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C+Tests&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_tests = requests.get(url_tests)
      cont_tests = json.loads(r_tests.content)
      
      for idx in cont_tests['features']:
          if idx['geometry']['x'] == x_coord and idx['geometry']['y'] == y_coord:
              self.vars["tests_cumulative"] = idx['attributes']['Tests']
              break

  def test_tunisia(self):
    self.driver.get("https://africacdc.maps.arcgis.com/apps/opsdashboard/index.html#/9d8d4add4dcb456997fd83607b5d0c7c")
    continent = WebDriverWait(self.driver, 40).until(expected_conditions.presence_of_element_located((By.ID, "Dashboard_1day_Sht1_5411_layer")))
    all_countries = self.driver.find_elements_by_tag_name('circle')
    action = ActionChains(self.driver)
    action.click_and_hold(on_element = all_countries[12])
    action.move_by_offset(0, -300)
    action.perform()
    action.release(on_element = all_countries[1]) 
    action.perform()
    continent = WebDriverWait(self.driver, 40).until(expected_conditions.presence_of_element_located((By.ID, "Dashboard_1day_Sht1_5411_layer")))
    all_countries = self.driver.find_elements_by_tag_name('circle')
    final_tests = ""
    for country in all_countries:
        try:
            country.click()
            temp_name = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(1) > td:nth-child(2)").text
            if temp_name == "Tunisia":
                final_tests = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(8) .esriNumericValue").text
                break
            else:
                self.driver.find_element_by_id('esri.Map_0_gc').click()
        except:
            pass

    self.vars["tests_cumulative"] = final_tests
    self.driver.close()
    self.driver.quit()
    # When dahsboard doesn't have country names, the json from the arcgis API is used
    if self.vars["tests_cumulative"]=="":
      url_coord = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/NEW_Dashboard/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_coord = requests.get(url_coord)
      cont_coord = json.loads(r_coord.content)
      
      for idx in cont_coord['features']:
         if idx['attributes']['Country'] == 'Tunisia':
             x_coord = idx['geometry']['x']
             y_coord = idx['geometry']['y']
             break
      
      url_tests = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/Dashboard_1day_Sht1/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C+Tests&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_tests = requests.get(url_tests)
      cont_tests = json.loads(r_tests.content)
      
      for idx in cont_tests['features']:
          if idx['geometry']['x'] == x_coord and idx['geometry']['y'] == y_coord:
              self.vars["tests_cumulative"] = idx['attributes']['Tests']
              break

  def test_uganda(self):
    self.driver.get("https://africacdc.maps.arcgis.com/apps/opsdashboard/index.html#/9d8d4add4dcb456997fd83607b5d0c7c")
    continent = WebDriverWait(self.driver, 40).until(expected_conditions.presence_of_element_located((By.ID, "Dashboard_1day_Sht1_5411_layer")))
    all_countries = self.driver.find_elements_by_tag_name('circle')
    final_tests = ""
    for country in all_countries:
        try:
            country.click()
            temp_name = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(1) > td:nth-child(2)").text
            if temp_name == "Uganda":
                final_tests = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(8) .esriNumericValue").text
                break
            else:
                self.driver.find_element_by_id('esri.Map_0_gc').click()
        except:
            pass

    self.vars["tests_cumulative"] = final_tests
    self.driver.close()
    self.driver.quit()
    # When dahsboard doesn't have country names, the json from the arcgis API is used
    if self.vars["tests_cumulative"]=="":
      url_coord = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/NEW_Dashboard/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_coord = requests.get(url_coord)
      cont_coord = json.loads(r_coord.content)
      
      for idx in cont_coord['features']:
         if idx['attributes']['Country'] == 'Uganda':
             x_coord = idx['geometry']['x']
             y_coord = idx['geometry']['y']
             break
      
      url_tests = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/Dashboard_1day_Sht1/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C+Tests&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_tests = requests.get(url_tests)
      cont_tests = json.loads(r_tests.content)
      
      for idx in cont_tests['features']:
          if idx['geometry']['x'] == x_coord and idx['geometry']['y'] == y_coord:
              self.vars["tests_cumulative"] = idx['attributes']['Tests']
              break

  def test_unitedRepublicofTanzania(self):
    self.driver.get("https://africacdc.maps.arcgis.com/apps/opsdashboard/index.html#/9d8d4add4dcb456997fd83607b5d0c7c")
    continent = WebDriverWait(self.driver, 40).until(expected_conditions.presence_of_element_located((By.ID, "Dashboard_1day_Sht1_5411_layer")))
    all_countries = self.driver.find_elements_by_tag_name('circle')
    final_tests = ""
    for country in all_countries:
        try:
            country.click()
            temp_name = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(1) > td:nth-child(2)").text
            if temp_name == "Tanzania":
                final_tests = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(8) .esriNumericValue").text
                break
            else:
                self.driver.find_element_by_id('esri.Map_0_gc').click()
        except:
            pass

    self.vars["tests_cumulative"] = final_tests
    self.driver.close()
    self.driver.quit()
    # When dahsboard doesn't have country names, the json from the arcgis API is used
    if self.vars["tests_cumulative"]=="":
      url_coord = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/NEW_Dashboard/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_coord = requests.get(url_coord)
      cont_coord = json.loads(r_coord.content)
      
      for idx in cont_coord['features']:
         if idx['attributes']['Country'] == 'Tanzania':
             x_coord = idx['geometry']['x']
             y_coord = idx['geometry']['y']
             break
      
      url_tests = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/Dashboard_1day_Sht1/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C+Tests&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_tests = requests.get(url_tests)
      cont_tests = json.loads(r_tests.content)
      
      for idx in cont_tests['features']:
          if idx['geometry']['x'] == 3877973.6486555194 and idx['geometry']['y'] == y_coord:
              self.vars["tests_cumulative"] = idx['attributes']['Tests']
              break
              
      print(self.vars)

  def test_westernSahara(self):
    self.driver.get("https://africacdc.maps.arcgis.com/apps/opsdashboard/index.html#/9d8d4add4dcb456997fd83607b5d0c7c")
    continent = WebDriverWait(self.driver, 40).until(expected_conditions.presence_of_element_located((By.ID, "Dashboard_1day_Sht1_5411_layer")))
    all_countries = self.driver.find_elements_by_tag_name('circle')
    final_tests = ""
    for country in all_countries:
        try:
            country.click()
            temp_name = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(1) > td:nth-child(2)").text
            if temp_name == "Western Sahara":
                final_tests = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(8) .esriNumericValue").text
                break
            else:
                self.driver.find_element_by_id('esri.Map_0_gc').click()
        except:
            pass

    self.vars["tests_cumulative"] = final_tests
    self.driver.close()
    self.driver.quit()
    # When dahsboard doesn't have country names, the json from the arcgis API is used
    if self.vars["tests_cumulative"]=="":
      url_coord = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/NEW_Dashboard/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_coord = requests.get(url_coord)
      cont_coord = json.loads(r_coord.content)
      
      for idx in cont_coord['features']:
         if idx['attributes']['Country'] == 'Western Sahara':
             x_coord = idx['geometry']['x']
             y_coord = idx['geometry']['y']
             break
      
      url_tests = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/Dashboard_1day_Sht1/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C+Tests&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_tests = requests.get(url_tests)
      cont_tests = json.loads(r_tests.content)
      
      for idx in cont_tests['features']:
          if idx['geometry']['x'] == x_coord and idx['geometry']['y'] == y_coord:
              self.vars["tests_cumulative"] = idx['attributes']['Tests']
              break

  def test_zambia(self):
    self.driver.get("https://africacdc.maps.arcgis.com/apps/opsdashboard/index.html#/9d8d4add4dcb456997fd83607b5d0c7c")
    continent = WebDriverWait(self.driver, 40).until(expected_conditions.presence_of_element_located((By.ID, "Dashboard_1day_Sht1_5411_layer")))
    all_countries = self.driver.find_elements_by_tag_name('circle')
    final_tests = ""
    for country in all_countries:
        try:
            country.click()
            temp_name = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(1) > td:nth-child(2)").text
            if temp_name == "Zambia":
                final_tests = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(8) .esriNumericValue").text
                break
            else:
                self.driver.find_element_by_id('esri.Map_0_gc').click()
        except:
            pass

    self.vars["tests_cumulative"] = final_tests
    self.driver.close()
    self.driver.quit()
    # When dahsboard doesn't have country names, the json from the arcgis API is used
    if self.vars["tests_cumulative"]=="":
      url_coord = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/NEW_Dashboard/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_coord = requests.get(url_coord)
      cont_coord = json.loads(r_coord.content)
      
      for idx in cont_coord['features']:
         if idx['attributes']['Country'] == 'Zambia':
             x_coord = idx['geometry']['x']
             y_coord = idx['geometry']['y']
             break
      
      url_tests = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/Dashboard_1day_Sht1/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C+Tests&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_tests = requests.get(url_tests)
      cont_tests = json.loads(r_tests.content)
      
      for idx in cont_tests['features']:
          if idx['geometry']['x'] == x_coord and idx['geometry']['y'] == y_coord:
              self.vars["tests_cumulative"] = idx['attributes']['Tests']
              break

  def test_zimbabwe(self):
    self.driver.get("https://africacdc.maps.arcgis.com/apps/opsdashboard/index.html#/9d8d4add4dcb456997fd83607b5d0c7c")
    continent = WebDriverWait(self.driver, 40).until(expected_conditions.presence_of_element_located((By.ID, "Dashboard_1day_Sht1_5411_layer")))
    all_countries = self.driver.find_elements_by_tag_name('circle')
    final_tests = ""
    for country in all_countries:
        try:
            country.click()
            temp_name = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(1) > td:nth-child(2)").text
            if temp_name == "Zimbabwe":
                final_tests = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(8) .esriNumericValue").text
                break
            else:
                self.driver.find_element_by_id('esri.Map_0_gc').click()
        except:
            pass

    self.vars["tests_cumulative"] = final_tests
    self.driver.close()
    self.driver.quit()
    # When dahsboard doesn't have country names, the json from the arcgis API is used
    if self.vars["tests_cumulative"]=="":
      url_coord = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/NEW_Dashboard/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_coord = requests.get(url_coord)
      cont_coord = json.loads(r_coord.content)
      
      for idx in cont_coord['features']:
         if idx['attributes']['Country'] == 'Zimbabwe':
             x_coord = idx['geometry']['x']
             y_coord = idx['geometry']['y']
             break
      
      url_tests = "https://services8.arcgis.com/vWozsma9VzGndzx7/ArcGIS/rest/services/Dashboard_1day_Sht1/FeatureServer/0/query?where=0%3D0&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=Country%2C+Tests&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=pjson&token="
      r_tests = requests.get(url_tests)
      cont_tests = json.loads(r_tests.content)
      
      for idx in cont_tests['features']:
          if idx['geometry']['x'] == x_coord and idx['geometry']['y'] == y_coord:
              self.vars["tests_cumulative"] = idx['attributes']['Tests']
              break



